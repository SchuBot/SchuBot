<script>
    //these are the users in chat
    var chatUsrs = [];

    //these are people that follow you
    var followerUsrs = [];
    var followerUsrsData = [];
    let recentFollowers = [];

    //these are people you follow
    var followingUsrsData = [];
    var selectedFollower = '';
    var devicewidth = (window.innerWidth > 0) ? window.innerWidth : screen.width;

    //move this argument value to config


    var iosocket = require('socket.io-client')('http://localhost:8081', {
        'reconnection': true,
        'reconnectionDelay': 10000,
        'reconnectionDelayMax': 50000,
        'reconnectionAttempts': 100
    });

    /*     const iosocket = io.connect('http://localhost:8081', {
            'reconnection': true,
            'reconnectionDelay': 1000,
            'reconnectionDelayMax': 5000,
            'reconnectionAttempts': 5
        }); */

    if (window.performance) {
        // console.info("window.performance works fine on this browser");
    }

    if (performance.navigation.type == 1) {
        console.info("Page Reloaded");
        //  pingBeam();
    } else {

    }

    $(function() {

        //build chart
        buildChartUsingJson();

        $("div notesNotification").hover(function() {
            $(this).addClass("specialOne");
        }, function() {
            $(this).removeClass("specialOne");
        });


        /*                 $("div input").hover(function() {
          $(this).addClass("blue");
        }, function() {
          $(this).removeClass("blue");
        }); */

        ////validating duration input
        document.getElementById("medAudOtherValue").onkeypress = function(e) {
            var chr = String.fromCharCode(e.which);
            if ("1234567890".indexOf(chr) < 0)
                return false;
        };
        document.getElementById("medImgOtherValue").onkeypress = function(e) {
            var chr = String.fromCharCode(e.which);
            if ("1234567890".indexOf(chr) < 0)
                return false;
        };
        document.getElementById("medVidOtherValue").onkeypress = function(e) {
            var chr = String.fromCharCode(e.which);
            if ("1234567890".indexOf(chr) < 0)
                return false;
        };



        //////////////// THEME COLOUR PICKER LISTENERS

        OutsideColorPicker.addEventListener("change", changeOutsideBox, false);
        InsideColorPicker.addEventListener("change", changeInsideBox, false);
        TogglesColorPicker.addEventListener("change", changeToggleButtons, false);
        TogglesTextColorPicker.addEventListener("change", changeToggleButtonsText, false);
        SearchColorPicker.addEventListener("change", changeSearchBoxes, false);
        DropdownTextColorPicker.addEventListener("change", changeDropdowns, false);
        DropdownBackgroundColorPicker.addEventListener("change", changeDropdownsBackground, false);
        ModuleTextColorPicker.addEventListener("change", changeTextOnModules, false);
        ModuleBackgroundColorPicker.addEventListener("change", changeBotBackgroundColor, false);

        //////// IOSOCKET CONFIGURATION
        iosocket.on('connect', function() {

            console.log('socket connected');
            connectedToSocket();

            processOutstandingNotes();


        });

        iosocket.on('connect_timeout', (timeout) => {

            console.log('web socket connect timeout' + JSON.stringify(timeout));
        });

        // iosocket.on("seq-num", (msg) => console.info(msg));

        iosocket.on('connect_error', (error) => {
            disconnectedToSocket();
            console.log('web socket connect error' + JSON.stringify(error));

        });

        iosocket.on('error', (error) => {
            console.log('bot web socket client error: ' + error.message);

        });


        iosocket.on('authenticated', function(message) {
            console.log('client recieved authenticated message');
            connectedToBeam();

        });

        iosocket.on('unauthenticated', function() {
            disconnectedToBeam();
            alert("Please Reauth your bot");

        });

        iosocket.on('reauthStreamer', function(data) {

            //alert("Please Re-Auth");
            $('#mixrConnection').attr('value', 100);
            document.getElementById("mixrConnection").style.visibility = 'hidden';
            document.getElementById("mixrConnectionLabel").style.visibility = 'hidden';



            document.getElementById("casterAccount").innerHTML = '';
            document.getElementById("casterAccount").innerHTML += "Streamer: Please Re-Auth";


        });

        iosocket.on('closeProgressBar', function(data) {

            //alert("Please Re-Auth");
            $('#mixrConnection').attr('value', 100);
            document.getElementById("mixrConnection").style.visibility = 'hidden';
            document.getElementById("mixrConnectionLabel").style.visibility = 'hidden';

        });

        iosocket.on('startProgressBar', function(data) {

            //show progressbar (TODO)
            // document.getElementById("mixrConnection").style.visibility = 'hidden';
            // document.getElementById("mixrConnectionLabel").style.visibility = 'hidden';


        });

        iosocket.on('reauthbot', function(data) {
            /* 
                        //alert("Please Re-Auth");
                        $('#mixrConnection').attr('value', 100);
                        document.getElementById("mixrConnection").style.visibility = 'hidden';
                        document.getElementById("mixrConnectionLabel").style.visibility = 'hidden'; */

            hideMixerProgressBar();

            setBotAccountUnAuthed();
            turnOffMixerIcons();



        });

        iosocket.on('reauthstreamer', function(data) {

            /*             //alert("Please Re-Auth");
                        $('#mixrConnection').attr('value', 100);
                        document.getElementById("mixrConnection").style.visibility = 'hidden';
                        document.getElementById("mixrConnectionLabel").style.visibility = 'hidden'; */
            hideMixerProgressBar();
            setStreamerUnAuthed();
            turnOffMixerIcons();


        });

        iosocket.on('botAuthenticated', function(data) {

            //alert("Please Re-Auth");
            $('#mixrConnection').attr('value', 100);
            document.getElementById("mixrConnection").style.visibility = 'hidden';
            document.getElementById("mixrConnectionLabel").style.visibility = 'hidden';

            //document.getElementById("botAuthAccount").innerHTML = '';
            //document.getElementById("botAuthAccount").innerHTML += "Bot: Authenticated";
            connectedToBeam();

        });

        iosocket.on('streamerAuthenticated', function(data) {

            //alert("Please Re-Auth");
            $('#mixrConnection').attr('value', 100);
            document.getElementById("mixrConnection").style.visibility = 'hidden';
            document.getElementById("mixrConnectionLabel").style.visibility = 'hidden';

            //document.getElementById("streamerAuthAccount").innerHTML = '';
            // document.getElementById("streamerAuthAccount").innerHTML += "Streamer: Authenticated";

            connectedToBeam();

        });

        iosocket.on('botLoggedIn', function(bot) {

            //alert('bot logged in');
            setBotAccountLoggedIn(bot);
        });

        iosocket.on('streamerLoggedIn', function(streamer) {
            //alert('streamer logged in');
            setStreamerAccountLoggedIn(streamer);
        });

        iosocket.on('loginaccounts', function(streamer, bot) {
            //alert('accounts logged in - Issue here lot into it');
            setAccountsOnUi(streamer, bot);
        });

        iosocket.on('followed', function(message) {

            console.log(JSON.stringify(message));
            $('#incomingChatMessages').append($('<li></li>').text(JSON.stringify(message, null, 2)));

            addSingleFollowerToList(message);

            //add item to recent followers ui table
            addSingleRecentFollower(message);

        });

        iosocket.on('UserJoined', function(message) {

            addSingleChatUserToList(message);

        });

        iosocket.on('MixerPurgeOrTimeoutMessage', function(message) {

            addModeratorsActionToModMonitorList(message, 'PurgeOrTimeout');
            //test
        });

        iosocket.on('MixerDeleteMessage', function(message) {

            addModeratorsActionToModMonitorList(message, 'delete');

        });

        iosocket.on('MixerPurgeMessageBan', function(message) {

            addModeratorsActionToModMonitorList(message, 'ban');

        });

        iosocket.on('UserPart', function(message) {

            removeSingleChatUserFromList(message);

        });

        iosocket.on('RemoveNoteFromTable', function(noteID) {

            removeNoteFromTable(noteID);

        });

        iosocket.on('RemoveTriggerFromTable', function(noteID) {
            removeTriggerFromTable(noteID);
        });

        iosocket.on('RemoveTimerFromTable', function(timerID) {
            removeTimerFromTable(timerID);
        });

        iosocket.on('RemoveAlertFromTable', function(message) {
            removeAlertFromTable(message);
        });

        iosocket.on('RemoveCommandFromTable', function(message) {
            removeCommandFromTable(message);
        });

        iosocket.on('RemoveCurrencyFromTable', function(message) {
            removeCurrencyFromTable(message);
        });

        iosocket.on('RemoveCurrencyRankFromTable', function(currencyId, currencyRankName) {

            //tr = $('<tr id="ID' + data.id + "RNK" + data.currencyRankName + '" class /> ');
            let rankID = "ID" + currencyId + "RNK" + currencyRankName;
            removeRankFromTable(rankID);
        });


        iosocket.on('receiveParentCurrency', function(data) {

            addOptionsToParentCurrencyDropdown(data);



        });


        iosocket.on('outstandingNotes', function(message) {

            //this is to warn the streamer they have outstanding items to do.
            //alert('You have Outstanding notes');
            document.getElementById("notesNotification").style.color = "red";

        });

        iosocket.on('update', function(message) {

            //this is a constellation update
            console.log('update in chat io');
            console.log('update is: ' + console.log(JSON.stringify(message)));

            alert(JSON.stringify(message));

        });

        iosocket.on('unfollowed', function(message) {
            //this works but uncommented for now
            /*             console.log('User Unfollowed');
                        console.log(JSON.stringify(message));
                        $('#incomingChatMessages').append($('<li></li>').text(JSON.stringify(message, null, 2)));
                        removeSingleFollowerFromList(message); */
        });

        iosocket.on('message', function(avatarURL, primaryRole, UserName, message, isWhisper) {

            //alert('Message Recieved');
            buildChatMessage(avatarURL, primaryRole, UserName, message, isWhisper);
            scrollToEnd("chatbox");

        });

        iosocket.on('NoAlertsSetup', function(message) {
            console.log('You have no Alerts setup', 'You have no Alerts setup');
            //alert("You have no alerts setup on the bot");

        });

        iosocket.on('timer', function(message) {

            $('#incomingChatMessages').append($('<li></li>').text("timer msg" + message));
            scrollToEnd("chatbox");

        });

        //server disconnected
        iosocket.on('disconnect', function(reason) {

            if (reason === 'io server disconnect') {
                console.log('socket disconnected, reconnecting');
                disconnectedToSocket();
                // the disconnection was initiated by the server, you need to reconnect manually
                iosocket.connect();
            }

        });

        iosocket.on('followerCount', function(data) {

            addFollowersToList(data);

            for (var i = 0; i < data.length; i++) {
                var obj = data[i];
                followerUsrs.push(obj.id);
            }


            followerUsrsData = data;

            var followCountStr = data.length.toString();

            $("#followCountUsrs").empty();
            $('#followCountUsrs').append($('<p></p>').text(followCountStr));

        });

        iosocket.on('followingCount', function(data) {

            addFollowingToList(data);

            $("#followingCountUsrs").empty();
            $('#followingCountUsrs').append($('<p></p>').text(data.length.toString()));

        });

        iosocket.on('chatusercount', function(data) {

            //add all users to JSON first
            data.forEach(function(element) {

                chatUsrs.push(element);
            }, this);

            //add users to table
            addChatUsersToList(data);

            //log temporarily to see whats in there
            console.log('Chat Usrs array ' + JSON.stringify(chatUsrs));

            //manage counter
            var chatCountStr = chatUsrs.length.toString();
            //$('#followCountUsrs').remove($('<p></p>'));
            $("#chatCountUsrs").empty();
            $('#chatCountUsrs').append($('<p>&nbsp;</p>').text(' (' + chatCountStr + ')'));

        });

        iosocket.on('hostalertlist', function(data) {
            addHostAlertsToTable(data);
        });

        iosocket.on('followalertlist', function(data) {
            addFollowAlertsToTable(data);
        });

        iosocket.on('keywordlist', function(data) {
            addKeywordsToTable(data);
        });

        iosocket.on('notelist', function(data) {
            addNotesToTable(data);
        });

        iosocket.on('timerlist', function(data) {
            addTimersToTable(data);
        });

        iosocket.on('currencylist', function(data) {
            addCurrencyToTable(data);
        });

        iosocket.on('addSaveSingleTimer', function(data) {
            addorAmendTimerToTable(data);
        });

        iosocket.on('addSaveSingleTrigger', function(data) {
            addorAmendTriggerToTable(data);
        });

        iosocket.on('addSaveSingleCurrency', function(data) {
            addorAmendCurrencyToTable(data);
        });


        iosocket.on('addSaveSingleCurrencyRank', function(data) {
            addorAmendCurrencyRankToTable(data);
        });



        iosocket.on('currencyRanksSelect', function(data, currencyId) {
            addCurrencyRanksToTable(data, currencyId);
        });


        iosocket.on('addSaveSingleCommand', function(data) {
            addorAmendCommandToTable(data);
        });

        iosocket.on('addSaveSingleAlert', function(data) {

            if (data.type == 'altAlertHost') {
                console.log('adding or ammending host alerts');
                addorAmendHostAlertToTable(data);
            }

            if (data.type == 'altAlertFollow') {
                console.log('adding or ammending follow alerts');
                addorAmendFollowAlertToTable(data);
            }
        });

        iosocket.on('addSaveSingleNote', function(data) {
            addorAmendNoteToTable(data);
        });

        iosocket.on('sendSoundFilesToDropDown', function(data) {
            addSoundMediaItems(data);
        });

        iosocket.on('setDefaultTheme', function(data) {
            setDefaultTheme(data);
        });

        iosocket.on('setDefaultUIVisibility', function(data) {
            setDefaultUIVisibility(data);
        });

        iosocket.on('sendVideoFilesToDropDown', function(data) {
            addVideoMediaItems(data);
        });

        iosocket.on('sendImageFilesToDropDown', function(data) {
            addImageMediaItems(data);
        });

        //processes command result
        iosocket.on('addSaveCommandResult', function(data) {
            var doSomethingWithResult = data;
        });

        iosocket.on('loadCommandsToList', function(data) {
            addCommandsToListModule(data);
        });

        iosocket.on('loadMediaToList', function(audioMedia, imageMedia, videoMedia) {
            addAllMediaToAlertAndCommandModules(audioMedia, imageMedia, videoMedia);
        });

        ////// SENDS MESSAGE TO MIXER VIA NODE JS SERVER
        $('#outgoingChatMessage').keypress(function(event) {
            if (event.which == 13) {
                event.preventDefault();

                if ($('#outgoingChatMessage').val().length > 0) {
                    if ($('#outgoingChatMessage').val().length < 360) {


                        // var AccountType = document.getElementById('selMixerSendChatMessageVars').value;
                        var AccountType = document.getElementById('selMixerSendChatMessageVars').selectedOptions[0].innerText;
                        iosocket.send($('#outgoingChatMessage').val(), AccountType);
                        $('#outgoingChatMessage').val('');
                    } else {
                        alert('You cannot send a message longer than 360 characters');
                    }

                } else {


                    //TODO build a dbObject for UI config settings for -->
                    //                   -->  dialogEmptyTextMessage , dialogNotesOutstandingMessage etc..
                    var dialogText = "What are you on?, I want some.";
                    showDialogWithImage("dialog", "dialogText", dialogText, "Message is empty");
                    /* $("#dialog").dialog({
                        title: "Quit the Paperwork",
                        modal: true,
                        resizable: false
                    }).show(); */

                }

            }
        });

        /////// 
        minimisePartyUsersBox = function(dataElement, parentElement) {
            minimiseBoxFunction(dataElement, parentElement);
        }

        minimiseFollowersBox = function(dataElement, parentElement) {
            minimiseBoxFunction460(dataElement, parentElement);
        }

        minimiseFollowingBox = function(dataElement, parentElement) {
            minimiseBoxFunction460(dataElement, parentElement);
        }

        minimiseChatBox = function(dataElement, parentElement) {
            minimiseBoxFunction460(dataElement, parentElement);
        }

        minimiseChatUsersBox = function(dataElement, parentElement) {
            minimiseBoxFunction460(dataElement, parentElement);
        }

        minimiseTimerBox = function(dataElement, parentElement) {
            minimiseBoxFunction(dataElement, parentElement);
        }

        minimiseModMonBox = function(dataElement, parentElement) {
            minimiseBoxFunction(dataElement, parentElement);
        }

        minimiseKeywordsBox = function(dataElement, parentElement) {
            minimiseBoxFunction(dataElement, parentElement);
        }

        minimiseNotesBox = function(dataElement, parentElement) {
            minimiseBoxFunction(dataElement, parentElement);
        }

        minimiseCommandListBox = function(dataElement, parentElement) {
            minimiseBoxFunction(dataElement, parentElement);
        }

        minimiseRecentFollowersBox = function(dataElement, parentElement) {
            minimiseBoxFunction(dataElement, parentElement);
        }

        minimiseCommandBoxFunction = function(dataElement, parentElement) {
            minimiseBoxFunction(dataElement, parentElement);
        }

        minimiseBoxFunction = function(dataElement, parentElement) {

            $('#' + dataElement).slideToggle();

            if (document.getElementById(parentElement).style.height == "80px") {
                document.getElementById(parentElement).style.height = "380px";
                document.getElementById(parentElement).style.zIndex = pushAllToBackReturnIntIn(9);
            } else {
                document.getElementById(parentElement).style.height = "80px";
                document.getElementById(parentElement).style.zIndex = pushAllToBackReturnIntIn(0);
            }

        }

        minimiseBoxFunction460 = function(dataElement, parentElement) {

            $('#' + dataElement).slideToggle();

            if (document.getElementById(parentElement).style.height == "80px") {
                document.getElementById(parentElement).style.height = "460px";
                document.getElementById(parentElement).style.zIndex = pushAllToBackReturnIntIn(9);
            } else {
                document.getElementById(parentElement).style.height = "80px";
                document.getElementById(parentElement).style.zIndex = pushAllToBackReturnIntIn(0);
            }

        }

        minimiseCurrencyListBox = function(dataElement, parentElement) {
            minimiseBoxFunction(dataElement, parentElement);
        }

        function pushAllToBackReturnIntIn(number) {

            var bringToBack = [];
            bringToBack.push("divWrapperChat");
            // bringToBack.push("divWrapperCommands");
            bringToBack.push("divWrapperAlerts");
            // bringToBack.push("divWrapperTriggerPanel");
            bringToBack.push("divWrapperMedia");
            bringToBack.push("divWrapperCommandsList");
            bringToBack.push("divWrapperFollowers");
            bringToBack.push("divWrapperFollowing");
            bringToBack.push("divWrapperHostAlertsList");
            bringToBack.push("divWrapperTimersList");
            bringToBack.push("divWrapperModMonitor");
            // bringToBack.push("divWrapperTimerPanel");
            bringToBack.push("divWrapperFollowAlertsList");
            bringToBack.push("divWrapperNarrowChatUsers");
            bringToBack.push("divWrapperNarrowRecentFollowers");
            bringToBack.push("divWrapperKeywordsList");
            //bringToBack.push("divWrapperNote");
            bringToBack.push("divWrapperNotesList");
            bringToBack.forEach(pushDivToBack, event.target.value);

            return number;
        }

        toggleSwitchModules = function(parentElement) {

            var x = document.getElementById(parentElement);
            if (x.style.display === "none") {
                x.style.display = "block";
            } else {
                x.style.display = "none";
            }

        }

        addModeratorsActionToModMonitorList = function(data, type) {

            switch (type) {

                case "delete":
                    var tr;
                    tr = $('<tr id="MMO' + data.id + '" class /> ');
                    tr.append("<td>" + data.date + "</td>");
                    tr.append("<td>" + data.rolewho + "</td>");
                    tr.append("<td>" + data.moderatorname + "</td>");
                    tr.append("<td>" + 'Deleted Message' + "</td>");
                    tr.append("<td>" + data.user + "</td>");
                    tr.append("<td>" + data.id + "</td>");
                    $('#tableMMO').append(tr);

                    break;
                case "ban":
                    tr = $('<tr id="MMO' + data.id + '" class /> ');
                    tr.append("<td>" + data.date + "</td>");
                    tr.append("<td>" + data.rolewho + "</td>");
                    tr.append("<td>" + data.moderatorname + "</td>");
                    tr.append("<td>" + 'Banned' + "</td>");
                    tr.append("<td>" + data.user + "</td>");
                    tr.append("<td>" + data.id + "</td>");
                    $('#tableMMO').append(tr);

                    break;
                case "PurgeOrTimeout":
                    tr = $('<tr id="MMO' + data.id + '" class /> ');
                    tr.append("<td>" + data.date + "</td>");
                    tr.append("<td>" + data.rolewho + "</td>");
                    tr.append("<td>" + data.moderatorname + "</td>");
                    tr.append("<td>" + 'Purged/Timed Out' + "</td>");
                    tr.append("<td>" + data.user + "</td>");
                    tr.append("<td>" + data.id + "</td>");
                    $('#tableMMO').append(tr);

                    break;
                default:
                    break;
            }
            //scroll table to end
            scrollToEnd('modmonListbox');

        }

        //adds list of followers to list
        addFollowersToList = function(data) {
            var tr;
            for (var i = 0; i < data.length; i++) {

                //these are your followers (people that you follow)
                tr = $('<tr id="YFL' + data[i].id + '" class /> ');
                tr.append("<td>" + data[i].id + "</td>");
                tr.append("<td>" + data[i].username + "</td>");
                tr.append("<td>" + data[i].followedDtFriendly + "</td>");
                $('#tableF').append(tr);

                //updates chat user if exists
                amendChatUserRowToFollower(data[i].id);
            }

        }

        addFollowingToList = function(data) {
            var tr;
            for (var i = 0; i < data.length; i++) {

                //these are people you follow
                tr = $('<tr id="FLW' + data[i].userId + '" class /> ');
                tr.append("<td>" + data[i].id + "</td>");
                tr.append("<td>" + data[i].token + "</td>");
                tr.append("<td>" + data[i].userId + "</td>");
                tr.append("<td>" + data[i].userId + "</td>");
                $('#tableCF').append(tr);
            }

            followingUsrsData = data;

        }

        //adds list of chat users to list
        addChatUsersToList = function(data) {

            var tr;
            for (var i = 0; i < data.length; i++) {

                var res = data[i].split(" - ", 3);
                var hidden = "display:none;";

                var userType = res[1];
                var colorToUse = getColorFromUserType(userType);
                var colorStyle = "color:" + colorToUse + ";";
                var isChatUrsFollowing = checkIfFollowing(res[2]);
                var ChatUrsFollowerResult = checkIfFollower(res[2]);

                //checks if user is already in chat table
                var addToTable = isInChat(res[2]);

                if (!addToTable) {
                    tr = $('<tr id="CU' + res[2] + '" style="' + colorStyle + '" class /> ');
                    // tr = $('<tr class /> ');
                    //tr.append("<td>" + data[i] + "</td>"); this contains username , userid and type (user,mod etc.)
                    tr.append("<td>" + res[0] + "</td>"); //show only name
                    tr.append("<td>" + ChatUrsFollowerResult + "</td>");
                    tr.append("<td style=\"" + hidden + "\">" + res[2] + "</td>");
                    $('#tableChatUsers').append(tr);
                }
            }
        }

        //get this from user
        getColorFromUserType = function(type) {

            switch (type) {
                case "User":
                    type = "blue";
                    break;
                case "Mod":
                    type = "green";
                    break;
                case "ChannelEditor":
                    type = "green";
                    break;
                case "Owner":
                    type = "gray";
                case "Pro":
                    type = "purple";
                default:
                    type = "blue";
                    break;
            }

            return type;
        }

        addHostAlertsToTable = function(data) {

            var tr;
            for (var i = 0; i < data.length; i++) {

                var hidden = "display:none;";

                tr = $('<tr id="HAL' + data[i].id + '" class /> ');
                // tr = $('<tr class /> ');
                tr.append("<td>" + data[i].enabled + "</td>");
                tr.append("<td>" + data[i].id + "</td>");
                tr.append("<td>" + data[i].audio + "</td>");
                tr.append("<td>" + data[i].video + "</td>");
                tr.append("<td>" + data[i].image + "</td>");
                tr.append("<td>" + data[i].text + "</td>");
                $('#tableHAL').append(tr);

            }
        }

        addFollowAlertsToTable = function(data) {

            var tr;
            for (var i = 0; i < data.length; i++) {

                var hidden = "display:none;";

                tr = $('<tr id="FAL' + data[i].id + '" class /> ');
                // tr = $('<tr class /> ');
                tr.append("<td>" + data[i].enabled + "</td>");
                tr.append("<td>" + data[i].id + "</td>");
                tr.append("<td>" + data[i].audio + "</td>");
                tr.append("<td>" + data[i].video + "</td>");
                tr.append("<td>" + data[i].image + "</td>");
                tr.append("<td>" + data[i].text + "</td>");
                $('#tableFAL').append(tr);

            }
        }

        addKeywordsToTable = function(data) {

            var tr;
            for (var i = 0; i < data.length; i++) {

                console.log('Keywords data for table is:' + data[i])

                var hidden = "display:none;";

                tr = $('<tr id="KW' + data[i].id + '" class /> ');
                // tr = $('<tr class /> ');
                tr.append("<td>" + data[i].id + "</td>");
                tr.append("<td>" + data[i].text + "</td>");
                tr.append("<td>" + data[i].enabled + "</td>");
                $('#tableKW').append(tr);

            }
        }

        addNotesToTable = function(data) {

            var tr;
            for (var i = 0; i < data.length; i++) {

                console.log('Notes data for table is:' + data[i])

                var hidden = "display:none;";

                tr = $('<tr id="NT' + data[i].id + '" class /> ');
                // tr = $('<tr class /> ');
                tr.append("<td style=\"" + hidden + "\">" + data.id + "</td>");
                tr.append("<td>" + data[i].todo + "</td>");
                tr.append("<td>" + data[i].note + "</td>");


                if (data[i].hasOwnProperty('priority')) {
                    tr.append("<td>" + data[i].priority + "</td>");
                } else {
                    tr.append("<td>N</td>");
                }

                if (data[i].hasOwnProperty('private')) {
                    tr.append("<td>" + data[i].private + "</td>");
                } else {
                    tr.append("<td>N</td>");
                }

                $('#tableNotes').append(tr);

            }
        }

        //this is when its a new table
        addorAmendTimerToTable = function(data) {

            var tr;

            var rowID = data.id.replace("!", "x");

            var timerRow = document.getElementById("tableTIM").rows.namedItem("TIM" + rowID);

            if (timerRow != null) {

                var timerRowIndex = timerRow.rowIndex;

                var x = document.getElementById("tableTIM").rows[timerRowIndex].cells;
                x[1].innerHTML = data.enabled;
                x[2].innerHTML = data.text;
                x[3].innerHTML = data.interval;
                x[4].innerHTML = data.option1;
                x[5].innerHTML = data.option2;

            } else {
                console.log('Timers data for table is:' + data.id)

                tr = $('<tr id="TIM' + rowID + '" class /> ');
                // tr = $('<tr class /> ');
                tr.append("<td>" + data.id + "</td>");
                tr.append("<td>" + data.enabled + "</td>");
                tr.append("<td>" + data.text + "</td>");
                tr.append("<td>" + data.interval + "</td>");
                tr.append("<td>" + data.option1 + "</td>");
                tr.append("<td>" + data.option2 + "</td>");

                $('#tableTIM').append(tr);
            }

        }

        addorAmendTriggerToTable = function(data) {

            var tr;

            var triggerRow = document.getElementById("tableKW").rows.namedItem("KW" + data.id);

            if (triggerRow != null) {

                var triggerRowIndex = triggerRow.rowIndex;

                var x = document.getElementById("tableKW").rows[triggerRowIndex].cells;

                x[1].innerHTML = data.text;
                x[2].innerHTML = data.enabled;

            } else {
                console.log('Trigger data for table is:' + data.id)

                tr = $('<tr id="KW' + data.id + '" class /> ');
                // tr = $('<tr class /> ');
                tr.append("<td>" + data.id + "</td>");
                tr.append("<td>" + data.text + "</td>");
                tr.append("<td>" + data.enabled + "</td>");

                $('#tableKW').append(tr);
            }

        }

        addorAmendCurrencyToTable = function(data) {

            var tr;

            var currencyRow = document.getElementById("tableCR").rows.namedItem("CR" + data.id);

            if (currencyRow != null) {

                var currencyRowIndex = currencyRow.rowIndex;

                var x = document.getElementById("tableCR").rows[currencyRowIndex].cells;

                x[0].innerHTML = data.enabled;
                x[1].innerHTML = data.id;
                x[2].innerHTML = data.currencyName;
                x[3].innerHTML = data.currencyBasedOn;

                if (data.currencyPerMin != '') {
                    x[4].innerHTML = data.currencyPerMin;
                }

                if (data.currencyParentId != '') {

                    x[5].innerHTML = data.currencyParentId;
                } else {
                    x[5].innerHTML = "Select an Option";
                }

                if (data.currencyParentName != '') {
                    x[6].innerHTML = data.currencyParentName;
                } else {
                    x[6].innerHTML = "";
                }

                if (data.currencyRatio != '') {
                    x[7].innerHTML = data.currencyRatio;
                }


            } else {
                console.log('Currency data for table is:' + data.id)

                tr = $('<tr id="CR' + data.id + '" class /> ');
                // tr = $('<tr class /> ');
                tr.append("<td>" + data.enabled + "</td>");
                tr.append("<td>" + data.id + "</td>");
                tr.append("<td>" + data.currencyName + "</td>");
                tr.append("<td>" + data.currencyBasedOn + "</td>");
                tr.append("<td>" + data.currencyPerMin + "</td>");
                tr.append("<td>" + data.currencyParentId + "</td>");
                tr.append("<td>" + data.currencyParentName + "</td>");
                tr.append("<td>" + data.currencyRatio + "</td>");

                //     "id": "test65",
                // "enabled": true,
                // "currencyName": "ewrst",
                // "currencyPerMin": "5",
                // "currencyRatio": "5",
                // "currencyBasedOn": "default",
                // "currencyParent": "default",
                // "option1": "",
                // "option2": ""


                $('#tableCR').append(tr);
            }

        }

        addorAmendCurrencyRankToTable = function(data) {

            var tr;

            var currencyRankRow = document.getElementById("tableRank").rows.namedItem("ID" + data.id + "RNK" + data.currencyRankName);

            if (currencyRankRow != null) {

                var currencyRankRowIndex = currencyRankRow.rowIndex;

                var RnkRow = document.getElementById("tableRank").rows[currencyRankRowIndex].cells;

                RnkRow[0].innerHTML = data.currencyRankName;
                RnkRow[1].innerHTML = data.currencyRankAmount;


            } else {
                console.log('Currency data for table is:' + data.id)

                tr = $('<tr id="ID' + data.id + "RNK" + data.currencyRankName + '" class /> ');
                // tr = $('<tr class /> ');
                //tr.append("<td>" + data.id + "</td>"); 
                tr.append("<td>" + data.currencyRankName + "</td>");
                tr.append("<td>" + data.currencyRankAmount + "</td>");


                $('#tableRank').append(tr);
            }

        }

        addCurrencyRanksToTable = function(data, currencyId) {

            var tr;
            if (data != null) {
                for (var i = 0; i < data.length; i++) {

                    //these are people you follow
                    tr = $('<tr id="ID' + currencyId + "RNK" + data[i].name.replace(/ /g, '') + '" class /> ');
                    tr.append("<td>" + data[i].name + "</td>");
                    tr.append("<td>" + data[i].amount + "</td>");
                    $('#tableRank').append(tr);
                }
            }


        }

        addorAmendCommandToTable = function(data) {

            var tr;
            var rowID = data.id.replace("!", "x");

            var triggerRow = document.getElementById("tableCO").rows.namedItem("CO" + rowID);

            if (triggerRow != null) {

                var triggerRowIndex = triggerRow.rowIndex;

                var x = document.getElementById("tableCO").rows[triggerRowIndex].cells;

                x[0].innerHTML = data.enabled;
                x[2].innerHTML = data.text;
                x[3].innerHTML = transformUIPermsToCommandPerms(data.permission);
                x[4].innerHTML = data.user;
                x[5].innerHTML = data.audio;
                x[6].innerHTML = data.video;
                x[7].innerHTML = data.image;
                // x[9].innerHTML = data.cooldown; not used

            } else {
                console.log('Trigger data for table is:' + data.id)

                tr = $('<tr id="CO' + rowID + '" class /> ');
                // tr = $('<tr class /> ');

                tr.append("<td>" + data.enabled + "</td>");
                tr.append("<td>" + data.id + "</td>");
                tr.append("<td>" + data.text + "</td>");
                tr.append("<td>" + transformUIPermsToCommandPerms(data.permission) + "</td>");
                tr.append("<td>" + data.user + "</td>");
                tr.append("<td>" + data.audio + "</td>");
                tr.append("<td>" + data.video + "</td>");
                tr.append("<td>" + data.image + "</td>");


                $('#tableCO').append(tr);
            }

        }

        addorAmendFollowAlertToTable = function(data) {

            var tr;

            var noteRow = document.getElementById("tableFAL").rows.namedItem("FAL" + data.id);

            if (noteRow != null) {

                var noteRowIndex = noteRow.rowIndex;

                var x = document.getElementById("tableFAL").rows[noteRowIndex].cells;

                x[0].innerHTML = data.enabled;
                x[1].innerHTML = data.id;
                x[2].innerHTML = data.audio;
                x[3].innerHTML = data.video;
                x[4].innerHTML = data.image;
                x[5].innerHTML = data.text;
                // x[6].innerHTML = data.audio;

            } else {
                console.log('Note data for table is:' + data.id)

                var hidden = "display:none;";

                tr = $('<tr id="FAL' + data.id + '" class /> ');
                // tr = $('<tr class /> ');
                /*   tr.append("<td style=\"" + hidden + "\">" + data.id + "</td>"); */
                tr.append("<td>" + data.enabled + "</td>");
                tr.append("<td>" + data.id + "</td>");
                tr.append("<td>" + data.audio + "</td>");
                tr.append("<td>" + data.video + "</td>");
                tr.append("<td>" + data.image + "</td>");
                tr.append("<td>" + data.text + "</td>");

                $('#tableFAL').append(tr);
            }

        }

        addorAmendHostAlertToTable = function(data) {

            var tr;

            var noteRow = document.getElementById("tableHAL").rows.namedItem("HAL" + data.id);

            if (noteRow != null) {

                var noteRowIndex = noteRow.rowIndex;

                var x = document.getElementById("tableHAL").rows[noteRowIndex].cells;

                x[0].innerHTML = data.enabled;
                x[1].innerHTML = data.id;
                x[2].innerHTML = data.audio;
                x[3].innerHTML = data.video;
                x[4].innerHTML = data.image;
                x[5].innerHTML = data.text;
                // x[6].innerHTML = data.audio;

            } else {
                console.log('Note data for table is:' + data.id)

                var hidden = "display:none;";

                tr = $('<tr id="HAL' + data.id + '" class /> ');
                // tr = $('<tr class /> ');
                /*   tr.append("<td style=\"" + hidden + "\">" + data.id + "</td>"); */
                tr.append("<td>" + data.enabled + "</td>");
                tr.append("<td>" + data.id + "</td>");
                tr.append("<td>" + data.audio + "</td>");
                tr.append("<td>" + data.video + "</td>");
                tr.append("<td>" + data.image + "</td>");
                tr.append("<td>" + data.text + "</td>");

                $('#tableHAL').append(tr);
            }

        }

        addorAmendNoteToTable = function(data) {

            var tr;

            var noteRow = document.getElementById("tableNotes").rows.namedItem("NT" + data.id);

            if (noteRow != null) {

                var noteRowIndex = noteRow.rowIndex;

                var x = document.getElementById("tableNotes").rows[noteRowIndex].cells;

                x[0].innerHTML = data.id;
                x[1].innerHTML = data.todo;
                x[2].innerHTML = data.note;

                if (data.hasOwnProperty("priority")) {
                    x[3].innerHTML = data.priority;
                }

                if (data.hasOwnProperty("private")) {
                    x[4].innerHTML = data.private;
                }

            } else {
                console.log('Note data for table is:' + data.id)

                var hidden = "display:none;";

                tr = $('<tr id="NT' + data.id + '" class /> ');
                // tr = $('<tr class /> ');
                tr.append("<td style=\"" + hidden + "\">" + data.id + "</td>");
                tr.append("<td>" + data.todo + "</td>");
                tr.append("<td>" + data.note + "</td>");
                tr.append("<td>" + data.priority + "</td>");
                tr.append("<td>" + data.private + "</td>");

                $('#tableNotes').append(tr);
            }

        }

        addTimersToTable = function(data) {

            if (data != null) {

                var tr;
                for (var i = 0; i < data.length; i++) {
                    var rowID = data[i].id.replace("!", "x");
                    //var result = isFollowing(id);
                    console.log('timers data for table is:' + data[i])

                    var hidden = "display:none;";

                    tr = $('<tr id="TIM' + rowID + '" class /> ');
                    // tr = $('<tr class /> ');
                    tr.append("<td>" + data[i].id + "</td>");
                    tr.append("<td>" + data[i].enabled + "</td>");
                    tr.append("<td>" + data[i].text + "</td>");
                    tr.append("<td>" + data[i].interval + "</td>");
                    tr.append("<td>" + "N/A" + "</td>");
                    tr.append("<td>" + "N/A" + "</td>");
                    $('#tableTIM').append(tr);

                }
            }
        }

        addCurrencyToTable = function(data) {

            if (data != null) {

                var tr;
                for (var i = 0; i < data.length; i++) {
                    //     tr = $('<tr id="CR' + data.id + '" class /> ');
                    // // tr = $('<tr class /> ');
                    // tr.append("<td>" + data.enabled + "</td>");
                    // tr.append("<td>" + data.id + "</td>");
                    // tr.append("<td>" + data.currencyName + "</td>");
                    // tr.append("<td>" + data.currencyBasedOn + "</td>");
                    // tr.append("<td>" + data.currencyPerMin + "</td>");
                    // tr.append("<td>" + data.currencyParent + "</td>");
                    // tr.append("<td>" + data.currencyRatio + "</td>");



                    var rowID = data[i].id;
                    //var result = isFollowing(id);
                    console.log('timers data for table is:' + data[i])

                    var hidden = "display:none;";

                    tr = $('<tr id="CR' + rowID + '" class /> ');
                    // tr = $('<tr class /> ');
                    tr.append("<td>" + data[i].enabled + "</td>");
                    tr.append("<td>" + data[i].id + "</td>");
                    tr.append("<td>" + data[i].currencyName + "</td>");
                    tr.append("<td>" + data[i].currencyBasedOn + "</td>");
                    tr.append("<td>" + data[i].currencyPerMin + "</td>");
                    tr.append("<td>" + data[i].currencyParentId + "</td>");
                    tr.append("<td>" + data[i].currencyParentName + "</td>");
                    tr.append("<td>" + data[i].currencyRatio + "</td>");

                    $('#tableCR').append(tr);

                }
            }
        }

        removeSingleFollowerFromList = function(data) {

            console.log("chat io - removeSingleFollowerFromList() " + data);

            $("#YFL" + data.info.user.id.toString()).remove();

            var rowCount = document.getElementById('tableF').rows.length - 1;

            // amends if still in chat and updates to not following
            amendChatUserRowToNonFollower(data.info.user.id);

            //var followCountStr = followerUsrs.length.toString();
            $("#followCountUsrs").empty();
            $('#followCountUsrs').append($('<p></p>').text(rowCount));
        }

        addSingleFollowerToList = function(data) {

            console.log("chat io - addSingleFollowerToList() " + data);

            followerUsrs.push(data.info.user.id);

            var tr;

            var d = new Date();

            tr = $('<tr id="YFL' + data.info.user.id + '" class /> ');
            tr.append("<td>" + data.info.user.id + "</td>");
            tr.append("<td>" + data.info.user.username + "</td>");
            tr.append("<td>" + d.toDateString() + "</td>");
            $('#tableF').append(tr);

            var rowCount = document.getElementById('tableF').rows.length - 1;

            //var followCountStr = followerUsrs.length.toString();
            $("#followCountUsrs").empty();
            $('#followCountUsrs').append($('<p></p>').text(rowCount));

            //updates chat user list if exists
            amendChatUserRowToFollower(data.info.user.id);
        }

        addSingleRecentFollower = function(data) {

            const followerID = data.info.user.id;

            if (recentFollowers.length > 0) {
                var result = recentFollowers.find(followerID)
            }

            recentFollowers.push(data.info.user.id);

            var tr;

            var d = new Date();
            var hidden = "display:none;";

            tr = $('<tr id="RFL' + data.info.user.id + '" class /> ');
            tr.append("<td style=\"" + hidden + "\">" + data.info.user.id + "</td>");
            tr.append("<td>" + data.info.user.username + "</td>");
            tr.append("<td>" + d.toDateString() + "</td>");
            $('#tableRecentFollowers').append(tr);

        }

        addSingleChatUserToList = function(data) {

            //console.log("chat io - addSingleChatUserToList() " + data);
            var newUser = [];
            var res = data.split(" - ", 3);

            console.log('User Array is' + JSON.stringify(data));

            //check these and whats in them
            newUser.push(res);

            //alert('addSingleChatUserToList ' + res[0]);

            if (!doesUserExistInChat(newUser, chatUsrs)) {
                chatUsrs.push(newUser);

                console.log('New Chat Usrs array is now ' + JSON.stringify(chatUsrs));

                // am I following chat user ?
                var ChatUsrFollowing = checkIfFollowing(res[2]);
                // is chat user following me ?
                var ChatUsrFollowerResult = checkIfFollower(res[2]);

                //delete any entries of that user
                //isInChatDelete(res[2]);

                var hidden = "display:none;";

                var colorToUse = getColorFromUserType(res[1]);
                var colorStyle = "color:" + colorToUse + ";"
                var tr;
                //tr = $('<tr id="CU' + res[2] + '" class /> ');
                tr = $('<tr id="CU' + res[2] + '" style="' + colorStyle + '" class /> ');
                tr.append("<td>" + res[0] + "</td>");
                tr.append("<td>" + ChatUsrFollowerResult + "</td>");
                // tr.append("<td>" + ChatUsrFollowerResult + "</td>");
                tr.append("<td style=\"" + hidden + "\">" + res[2] + "</td>");
                $('#tableChatUsers').append(tr);

                var chatCountStrNew = chatUsrs.length.toString();
                $("#chatCountUsrs").empty();
                $('#chatCountUsrs').append($('<p>&nbsp;</p>').text(' (' + chatCountStrNew + ')'));

            }

        }

        function doesUserExistInChat(obj, list) {
            var x;
            for (x in list) {
                console.log(list.hasOwnProperty(x));
                console.log(list[x].toString());
                console.log(obj[0][0] + ',' + obj[0][1] + ',' + obj[0][2]);

                console.log('Object to find:- ' + obj[0][0]);

                //var userName = list[x].split('-');

                var userName = "";

                if (Array.isArray(list)) {
                    userName = obj[0][0];
                } else {
                    userName = list[x].split('-')[0];
                }

                console.log('userName from Object :- ' + obj[0][0]);

                //alert('username ' + userName[0]);

                //if (list.hasOwnProperty(x) && list[x].toString() === obj[0][0] + ',' + obj[0][1] + ',' + obj[0][2]) {

                //match by username for now
                if (list.hasOwnProperty(x) && userName === obj[0][0]) {
                    return true;
                }
            }

            return false;
        }

        amendChatUserRowToFollower = function(id) {

            var elid = "CU" + id;
            var el = document.getElementById(elid);

            if (el !== null) {

                //var chatUserdata = document.getElementById(elid).cells[0].innerHTML.toString();
                document.getElementById(elid).cells[1].innerText = "Follower";

                /*                 if (document.getElementById(elid).firstChild == '[object HTMLTableCellElement]') {

                                    //Get contents off "cell clicked
                                    var content = "Follower";
                                    //amend chat user to follower
                                    var hidden = "display:none;";

                                    var dataSplit = chatUserdata.split('-');
                                    var colorToUse = getColorFromUserType(res[1]);
                                    var userTypecolor = "color:" + colorToUse + ";"

                                    //alert('color to use on amend to follower ' + colorToUse);

                                    var row = '<tr id="' + elid + '" class /> ' + "<td style=\"" + userTypecolor + "\">" + chatUserdata + "</td>" + "<td>" + content + "</td>" + "<td style=\"" + hidden + "\">" + id + "</td>";
                                    document.getElementById(elid).innerHTML = row;
                                } */
            }


        }

        amendChatUserRowToNonFollower = function(id) {

            var elid = "CU" + id;
            var el = document.getElementById(elid);
            console.log("Chat User Row data Element is: " + document.getElementById(elid).cells[0].innerHTML.toString())


            if (el !== null) {

                console.log(" unfollowed event entire element html is: " + document.getElementById(elid).innerHTML.toString());


                //var chatUserdata = document.getElementById(elid).cells[0].innerHTML.toString();
                document.getElementById(elid).cells[1].innerText = "Not a Follower";
                /*                 if (document.getElementById(elid).firstChild == '[object Text]') {

                                    //Get contents off "cell clicked
                                    var content = "Not a Follower";
                                    //amend chat user to follower
                                    var hidden = "display:none;";

                                    var dataSplit = chatUserdata.split('-');
                                    var colorToUse = getColorFromUserType(res[1]);
                                    var userTypecolor = "color:" + colorToUse + ";"

                                    //alert('color to use on amend to not follower ' + colorToUse);

                                    //var row = '<tr id="' + elid + '" class /> ' + "<td>" + chatUserdata + "</td>" + "<td>" + content + "</td>" + "<td style=\"" + hidden + "\">" + id + "</td>";

                                    var row = '<tr id="' + elid + '" class /> ' + "<td style=\"" + userTypecolor + "\">" + chatUserdata + "</td>" + "<td>" + content + "</td>" + "<td style=\"" + hidden + "\">" + id + "</td>";

                                    document.getElementById(elid).innerHTML = row;
                                } */
            }


        }

        removeSingleChatUserFromList = function(data) {

            console.log("User Left Channel");
            console.log(JSON.stringify(data));

            var res = data.split(" - ", 3);
            console.log(res);

            //check these and whats in them
            chatUsrs.shift(res);
            $("#CU" + res[2]).remove();

            var chatCountStrNew = chatUsrs.length.toString();
            $("#chatCountUsrs").empty();
            $('#chatCountUsrs').append($('<p>&nbsp;</p>').text(' (' + chatCountStrNew + ')'));

        }

        removeNoteFromTable = function(noteID) {

            console.log("Removing Note");
            console.log("Note to remove is" + noteID);

            //check these and whats in them

            $("#NT" + noteID).remove();

        }

        removeTimerFromTable = function(timerID) {

            console.log("Removing Note");
            console.log("Timer to remove is" + timerID);

            //check these and whats in them

            $("#TIM" + timerID.replace("!", "x")).remove();

        }

        removeTriggerFromTable = function(triggerID) {
            console.log("Trigger to remove is" + triggerID);
            //check these and whats in them
            $("#KW" + triggerID.replace("!", "x")).remove();
        }

        removeAlertFromTable = function(alertObj) {
            if (alertObj.type == 'altAlertHost') {
                //check these and whats in them
                $("#HAL" + alertObj.id).remove();
            }


            if (alertObj.type == 'altAlertFollow') {
                //check these and whats in them

                $("#FAL" + alertObj.id).remove();
            }

        }

        removeCommandFromTable = function(commandID) {
            //check these and whats in them
            console.log("Command ID to remove is: " + commandID);
            $("#CO" + commandID).remove();
        }

        removeCurrencyFromTable = function(commandID) {
            //check these and whats in them
            console.log("Currency ID to remove is: " + commandID);
            $("#CR" + commandID).remove();
        }

        removeRankFromTable = function(rankID) {
            //check these and whats in them
            console.log("Currency Rank ID to remove is: " + rankID);
            $("#" + rankID).remove();
        }

        commandsPanelSelectPerms = function(data) {
            if (data === "User") {
                document.getElementById("commandUser").readOnly = false;
            } else {
                document.getElementById("commandUser").readOnly = true;
            }
        }

        mediaTypeSelected = function(data) {
            data = document.getElementById(data).selectedOptions[0].innerText;

            switch (data) {
                case "Audio":
                    document.getElementById("audioMedSelect").disabled = false;
                    document.getElementById("selAudioDurationMedVars").disabled = false;

                    document.getElementById("imageMedSelect").disabled = true;
                    document.getElementById("selImageDurationMedVars").disabled = true;
                    document.getElementById("videoMedSelect").disabled = true;
                    document.getElementById("selVideoDurationMedVars").disabled = true;

                    document.getElementById("imageMedSelect").value = "default";
                    document.getElementById("selImageDurationMedVars").value = "default";
                    document.getElementById("videoMedSelect").value = "default";
                    document.getElementById("selVideoDurationMedVars").value = "default";

                    document.getElementById("medAudOtherValue").readOnly = true;
                    document.getElementById("medAudOtherValue").value = "";
                    document.getElementById("medImgOtherValue").readOnly = true;
                    document.getElementById("medImgOtherValue").value = "";
                    document.getElementById("medVidOtherValue").readOnly = true;
                    document.getElementById("medVidOtherValue").value = "";
                    break;

                case "Image":
                    document.getElementById("imageMedSelect").disabled = false;
                    document.getElementById("selImageDurationMedVars").disabled = false;

                    document.getElementById("audioMedSelect").disabled = true;
                    document.getElementById("selAudioDurationMedVars").disabled = true;
                    document.getElementById("videoMedSelect").disabled = true;
                    document.getElementById("selVideoDurationMedVars").disabled = true;


                    document.getElementById("audioMedSelect").value = "default";
                    document.getElementById("selAudioDurationMedVars").value = "default";
                    document.getElementById("videoMedSelect").value = "default";
                    document.getElementById("selVideoDurationMedVars").value = "default";

                    document.getElementById("medAudOtherValue").readOnly = true;
                    document.getElementById("medAudOtherValue").value = "";
                    document.getElementById("medImgOtherValue").readOnly = true;
                    document.getElementById("medImgOtherValue").value = "";
                    document.getElementById("medVidOtherValue").readOnly = true;
                    document.getElementById("medVidOtherValue").value = "";

                    break;

                case "Video":
                    document.getElementById("videoMedSelect").disabled = false;
                    document.getElementById("selVideoDurationMedVars").disabled = false;

                    document.getElementById("imageMedSelect").disabled = true;
                    document.getElementById("selImageDurationMedVars").disabled = true;
                    document.getElementById("audioMedSelect").disabled = true;
                    document.getElementById("selAudioDurationMedVars").disabled = true;


                    document.getElementById("audioMedSelect").value = "default";
                    document.getElementById("selAudioDurationMedVars").value = "default";
                    document.getElementById("imageMedSelect").value = "default";
                    document.getElementById("selImageDurationMedVars").value = "default";

                    document.getElementById("medAudOtherValue").readOnly = true;
                    document.getElementById("medAudOtherValue").value = "";
                    document.getElementById("medImgOtherValue").readOnly = true;
                    document.getElementById("medImgOtherValue").value = "";
                    document.getElementById("medVidOtherValue").readOnly = true;
                    document.getElementById("medVidOtherValue").value = "";

                    break;

                default:
                    document.getElementById("audioMedSelect").value = "default";
                    document.getElementById("selAudioDurationMedVars").value = "default";
                    document.getElementById("imageMedSelect").value = "default";
                    document.getElementById("selImageDurationMedVars").value = "default";
                    document.getElementById("videoMedSelect").value = "default";
                    document.getElementById("selVideoDurationMedVars").value = "default";

                    document.getElementById("medAudOtherValue").readOnly = true;
                    document.getElementById("medAudOtherValue").value = "";
                    document.getElementById("medImgOtherValue").readOnly = true;
                    document.getElementById("medImgOtherValue").value = "";
                    document.getElementById("medVidOtherValue").readOnly = true;
                    document.getElementById("medVidOtherValue").value = "";
                    break;
            }


        }

        audioDurOtherSelected = function(data) {
            data = document.getElementById(data).selectedOptions[0].innerText;

            if (data === "Other") {

                document.getElementById("medAudOtherValue").readOnly = false;

            } else {
                document.getElementById("medAudOtherValue").readOnly = true;
                document.getElementById("medAudOtherValue").value = "";
            }
        }

        imageDurOtherSelected = function(data) {
            data = document.getElementById(data).selectedOptions[0].innerText;
            if (data === "Other") {

                document.getElementById("medImgOtherValue").readOnly = false;


            } else {
                document.getElementById("medImgOtherValue").readOnly = true;
                document.getElementById("medImgOtherValue").value = "";
            }
        }

        videoDurOtherSelected = function(data) {
            data = document.getElementById(data).selectedOptions[0].innerText;
            if (data === "Other") {

                document.getElementById("medVidOtherValue").readOnly = false;


            } else {
                document.getElementById("medVidOtherValue").readOnly = true;
                document.getElementById("medVidOtherValue").value = "";
            }
        }

        //check the following to see if I am following my follower
        checkIfFollowing = function(data) {

            var found = isFollowing(data);

            if (found)
                return "Unfollow";
            else
                return "Follow"

        };

        isFollowing = function(userID) {
            //check if chat user is following
            var FollowingRow = $("#FLW" + userID);

            if (FollowingRow !== null) {
                return true;
            } else {
                return false;
            }

        }

        isMyFollowingAFollower = function(userID) {
            //is the person I am following a follower i.e are they in my followers list?
            var FollowingRow = $("#YFL" + userID);

            if (FollowingRow !== null) {

                //I am following
                return "Follows Me";
            } else {
                //I am not following
                return "Does Follow Me";
            }

        }

        isFollowingMyFollower = function(userID) {
            //check if I am following my follower

            //TODO (call api to check if I follow -->
            //    --> as big streamers will have loads of followers and not all will be loaded)

            var FollowingRow = $("#FLW" + userID);

            if (Object.keys(FollowingRow).length > 2) {

                return "Unfollow";
                // Your code here if x has some properties  
            } else {
                return "Follow";
            }

            /* if (FollowingRow !== null) {

            //I am following
            return "Following";
            } else {
            //I am not following
            return "Not Following";
            } */

        }

        //check if user is follower
        function checkIfFollower(data) {

            var found = isFollower(data);

            if (found)
                return "Follower";
            else
                return "Not a Follower"

        };

        isFollower = function(userID) {
            //check if chat user is following

            var FollowerRow = document.getElementById("tableF").rows.namedItem("YFL" + userID);

            if (FollowerRow !== null) {
                return true;
            } else {
                return false;
            }

        }

        isInChatDelete = function(userID) {
            //check if chat user is following
            console.log('user to delete is: ' + userID);

            var FollowerRow = document.getElementById("tableChatUsers").rows.namedItem("CU" + userID);
            console.log('user to delete is: ' + userID);

            if (FollowerRow !== null) {
                $("#CU" + FollowerRow[2]).remove();
            } else {

            }

        }

        isInChat = function(userID) {

            var FollowerRow = document.getElementById("tableChatUsers").rows.namedItem("CU" + userID);

            if (FollowerRow !== null) {
                return true;
            } else {
                return false;
            }

        }

        //this deals with themodules switches
        chkBoxToglModuleVisible = function(div) {

            var x = document.getElementById(div);

            if (x.style.display === "none") {
                x.style.display = "block";
            } else {
                x.style.display = "none";
            }

        }



        //#region 
        $("#chtUsrChkBox").change(function() {
            chkBoxToglModuleVisible('divWrapperNarrowChatUsers');
        });

        $("#recentFollowersChkBox").change(function() {
            chkBoxToglModuleVisible('divWrapperNarrowRecentFollowers');
        });

        $("#chtBoxChkBox").change(function() {
            chkBoxToglModuleVisible('divWrapperChat');
        });

        $("#followersChkBox").change(function() {
            chkBoxToglModuleVisible('divWrapperFollowers');
        });

        $("#followingChkBox").change(function() {
            chkBoxToglModuleVisible('divWrapperFollowing');
        });

        $("#partyQChkBox").change(function() {
            chkBoxToglModuleVisible('divWrapperNarrowPartyUsers');
        });

        $("#mediafilesChkBox").change(function() {
            chkBoxToglModuleVisible('divWrapperMedia');
        });

        $("#analyticsViewsChkBox").change(function() {
            chkBoxToglModuleVisible('divWrapperAnalyticsViews');
        });

        $("#alertfilesChkBox").change(function() {
            chkBoxToglModuleVisible('divWrapperAlerts');
        });

        $("#hostalertsChkBox").change(function() {
            chkBoxToglModuleVisible('divWrapperHostAlertsList');
        });

        $("#followalertsChkBox").change(function() {
            chkBoxToglModuleVisible('divWrapperFollowAlertsList');
        });

        //LIST MODULES
        $("#commandsListChkBox").change(function() {
            chkBoxToglModuleVisible('divWrapperCommandsList');
        });

        $("#keywordsListChkBox").change(function() {
            chkBoxToglModuleVisible('divWrapperKeywordsList');
        });

        $("#CurrencySwitchChkBox").change(function() {
            chkBoxToglModuleVisible('divWrapperCurrencyList');
        });


        $("#notesListChkBox").change(function() {
            chkBoxToglModuleVisible('divWrapperNotesList');
        });

        $("#timerListChkBox").change(function() {
            chkBoxToglModuleVisible('divWrapperTimersList');
        });

        $("#modMonChkBox").change(function() {
            chkBoxToglModuleVisible('divWrapperModMonitor');
        });

        $("#managerTimersChkBox").change(function() {
            chkBoxToglModuleVisible('divWrapperTimerPanel');
        });

        $("#ChatWhispersSwitchChkBox").change(function() {
            if (document.getElementById("ChatWhispersSwitchChkBox").checked) {
                UnHideUIClassElement("whisperMessageRow");
            } else {
                HideUIClassElement("whisperMessageRow");
            }
        });



        $("#switch1").change(function() {

            if (document.getElementById('switch1').checked) {

                //alert('checked');
                $('.switch1').css({
                    "background-color": "green"
                });


                iosocket.emit('startTimers', null);


            } else {
                // alert('unchecked');
                $('.switch1').css({
                    "background-color": "gray"
                });

                iosocket.emit('stopTimers', null);
            }

        });


        // this plays a sound on the page for use with commands and possiblity quotes timers etc..
        playCommandSound = function(file) {
            /*     var snd = new Audio("../sounds/sound1.mp3"); // buffers automatically when created
                snd.play(); 
                file
                */
            // var src = "../sounds/sound1.mp3";
            var src = "../sounds/" + file;
            var c = document.createElement('audio');
            c.src = src;

            c.play();
        }

        addSaveCommand = function() {

            var cmdObject = getCommandVariablesFromUI();

            if (cmdObject != undefined) {
                iosocket.emit('addSaveCommand', cmdObject);
                setAddSaveDeleteCommandDefaults();
            }




        }

        addSaveCurrency = function() {

            var currObject = getCurrencyVariablesFromUI();

            if (currObject != undefined) {
                convertEnabledBoolToYORN(currObject)
                iosocket.emit('addSaveCurrency', currObject);
                setAddSaveDeleteCurrencyDefaults();
                $("#tableRank").find("tr:not(:first)").remove();
            }
        }

        addSaveCurrencyRank = function() {

            //inputRankName
            //inputRankAmount
            var currRankObject = getCurrencyRankVariablesFromUI();

            if (currRankObject != undefined) {
                iosocket.emit('addSaveCurrencyRank', currRankObject);
                setAddSaveDeleteCurrencyRankDefaults();
            }



        }


        deleteCurrencyRank = function() {

            var currRankObject = getCurrencyRankVariablesFromUI();

            if (currRankObject != undefined) {
                iosocket.emit('deleteCurrencyRank', currRankObject);
                setAddSaveDeleteCurrencyRankDefaults();
            }

        }

        newCurrency = function() {

            newCurrencyDefaults();

        }

        //
        addCommandVarToTextBox = function() {

            // addCommandVar id of the button
            var commandTextVal = document.getElementById('commandText').value;
            var commandVarString = document.getElementById('selOptVars').selectedOptions[0].innerText

            var commandVarValue = getCommandVariableValue(commandVarString);

            var commandTextAddVar = commandTextVal + commandVarValue;

            document.getElementById('commandText').value = commandTextAddVar;

        }

        getCommandVariableValue = function(commandVarVal) {

            switch (commandVarVal) {
                case "select a variable":
                    commandVarVal = ''
                    break;
                case "Uptime":
                    commandVarVal = '$uptime'
                    break;
                case "User":
                    commandVarVal = '$user'
                    break;
                case "Target":
                    commandVarVal = '$target'
                    break;
                case "Caster":
                    commandVarVal = '$caster'
                    break;
                case "Sparks":
                    commandVarVal = '$sparks'
                    break;
                case "Channel Info":
                    commandVarVal = '$channelInfo'
                    break;
                case "Level":
                    commandVarVal = '$level'
                    break;
                case "Joined Date":
                    commandVarVal = '$joinedDate'
                    break;
                case "Joined":
                    commandVarVal = '$joined'
                    break;
                case "Random User":
                    commandVarVal = '$randUser'
                    break;
                case "Random User Excl Self":
                    commandVarVal = '$randUserExclSelf'
                    break;
                default:
                    break;
            }

            return commandVarVal;

        }

        deleteCommand = function() {

            var cmdObject = getCommandVariablesFromUI();

            if (cmdObject != undefined) {
                iosocket.emit('deleteCommand', cmdObject);
                setAddSaveDeleteCommandDefaults();
            }



        }

        deleteCurrency = function() {

            var cmdObject = getCurrencyVariablesFromUI();
            if (confirm(' will no longer gain more currency')) {
                if (cmdObject != undefined) {
                    iosocket.emit('deleteCurrency', cmdObject);
                    setAddSaveDeleteCurrencyDefaults();
                    $("#tableRank").find("tr:not(:first)").remove();
                } else {
                    alert('Currency not deleted!');
                }

            } else {

                alert('Currency was not deleted');

            }
        }



        addSaveTimer = function() {
            var timObject = getTimerVariablesFromUI();

            if (timObject != undefined) {
                iosocket.emit('addSaveTimer', timObject);
                setSaveDeleteTimerDefaults();
            }


        }

        addSaveTrigger = function() {
            var triObject = getTriggerVariablesFromUI();

            if (triObject != undefined) {
                iosocket.emit('addSaveTrigger', triObject);
                setSaveDeleteTriggerDefaults();
            }

        }

        addSaveNote = function() {
            var notObject = getNoteVariablesFromUI();

            if (notObject != undefined) {
                iosocket.emit('addSaveNote', notObject);
                setSaveNoteDefaults();
                processOutstandingNotes();
            }


        }

        deleteNote = function() {
            var notObject = getNoteVariablesFromUI();

            if (notObject != undefined) {
                iosocket.emit('deleteNote', notObject);
                setDeleteNoteDefaults();
            }

        }

        newNote = function() {
            newNoteDefaults();
        }

        completeNote = function() {

            SetCheckboxElement("chkNTBoxInputEnabled", false);
            SetCheckboxElement("chkNTBoxInputPriority", false);

            var notObject = getNoteVariablesFromUI();

            if (notObject != undefined) {
                iosocket.emit('completeNote', notObject);
            }

            SetSelectElement("noteName", "");
            SetSelectElement("ntNoteText", "");
        }

        deleteTrigger = function() {
            var triObject = getTriggerVariablesFromUI();

            if (triObject != undefined) {
                iosocket.emit('deleteTrigger', triObject);
                setSaveDeleteTriggerDefaults();
            }

        }

        deleteTimer = function() {
            var timObject = getTimerVariablesFromUI();

            if (timObject != undefined) {
                iosocket.emit('deleteTimer', timObject);
                setSaveDeleteTimerDefaults();
            }
        }

        //need to work on this
        addEditAlert = function() {
            var cmdObject = getAlertVariablesFromUI();
            iosocket.emit('addEditAlert', cmdObject);
            setAddSaveDeleteAlertDefaults();
        }

        deleteAlert = function() {
            var cmdObject = getAlertVariablesFromUI();
            if (cmdObject != undefined) {
                iosocket.emit('deleteAlert', cmdObject);
                setAddSaveDeleteAlertDefaults();
            }

        }

        addSaveMedia = function() {
            var mediaObject = getMediaVariablesFromUI();
            if (mediaObject != undefined) {
                iosocket.emit('addSaveMedia', mediaObject);
                setAddSaveDeleteMediaDefaults();
            }

        }

        deleteMedia = function() {
            var mediaObject = getMediaVariablesFromUI();
            if (mediaObject != undefined) {
                iosocket.emit('deleteMedia', mediaObject);
            }
        }

        function getLetterFullDateTimeString(dateIn) {

            var dayWeek = getWeekDayName(dateIn.getDay());
            var dayNo = getDayName(dateIn.getDate());
            var monthName = getDateMonthName(dateIn.getMonth());
            var yearstr = dateIn.getFullYear();
            var hoursValue = dateIn.getHours() + ':' + dateIn.getMinutes() + ':' + dateIn.getSeconds();

            return dayWeek + ' ' + dayNo + ' ' + monthName + ' ' + yearstr + ' ' + hoursValue;
        }

        function getFullDateTimeStringForID(dateIn) {

            var dayWeek = dateIn.getDay().toString();
            var dayNo = dateIn.getDate().toString();
            var monthName = (dateIn.getMonth() + 1).toString();
            var yearstr = dateIn.getFullYear().toString();
            var hoursValue = dateIn.getHours().toString()
            var mins = dateIn.getMinutes().toString()
            var seconds = dateIn.getSeconds().toString();

            var id = "";
            id = id.concat(dayNo, monthName, dayWeek, yearstr, hoursValue, mins, seconds);
            return "n" + id;
        }

        function getDateMonthName(monthStr) {

            switch (monthStr) {
                case 0:
                    monthStr = 'January'
                    break;
                case 1:
                    monthStr = 'February'
                    break;
                case 2:
                    monthStr = 'March'
                    break;
                case 3:
                    monthStr = 'April'
                    break;
                case 4:
                    monthStr = 'May'
                    break;
                case 5:
                    monthStr = 'June'
                    break;
                case 6:
                    monthStr = 'July'
                    break;
                case 7:
                    monthStr = 'August'
                    break;
                case 8:
                    monthStr = 'September'
                    break;
                case 9:
                    monthStr = 'October'
                    break;
                case 10:
                    monthStr = 'November'
                    break;
                case 11:
                    monthStr = 'December'
                    break;
                default:
                    break;
            }

            return monthStr;

        }

        function getWeekDayName(dayStr) {

            switch (dayStr) {
                case 0:
                    dayStr = 'Sunday'
                    break;
                case 1:
                    dayStr = 'Monday'
                    break;
                case 2:
                    dayStr = 'Tuesday'
                    break;
                case 3:
                    dayStr = 'Wednesday'
                    break;
                case 4:
                    dayStr = 'Thursday'
                    break;
                case 5:
                    dayStr = 'Friday'
                    break;
                case 6:
                    dayStr = 'Saturday'
                    break;
            }

            return dayStr;
        }

        function getDayName(i) {

            var j = i % 10,
                k = i % 100;
            if (j == 1 && k != 11) {
                return i + "st";
            }
            if (j == 2 && k != 12) {
                return i + "nd";
            }
            if (j == 3 && k != 13) {
                return i + "rd";
            }
            return i + "th";
        }

        function getTimerVariablesFromUI() {

            var timerEnabled = document.getElementById('chkTPBoxInputEnabled').checked;
            var timerName = document.getElementById('TPtimerID').value;
            var timerText = document.getElementById('tpText').value;
            var timerInterval = document.getElementById('tpInterval').value;

            if (timerName == "" || timerInterval == "") {

                if (timerName == "") {
                    alert("Please Select a Timer ID");
                    return;
                } else {
                    alert("Please Select an Interval");
                    return;
                }

            }

            var timerObject = new Object();

            //creates the command object
            timerObject["enabled"] = convertEnabledBoolToYORN(timerEnabled);
            timerObject["id"] = timerName;
            timerObject["text"] = timerText;
            timerObject["interval"] = parseInt(timerInterval);
            timerObject["option1"] = "";
            timerObject["option2"] = "";

            return timerObject;

        }

        function getTriggerVariablesFromUI() {

            var triggerEnabled = document.getElementById('chkKWBoxInputEnabled').checked;
            var triggerName = document.getElementById('triggerName').value;
            var triggerText = document.getElementById('kwTrigText').value;

            var triggerObject = new Object();

            //creates the command object
            triggerObject["enabled"] = convertEnabledBoolToYORN(triggerEnabled);
            triggerObject["id"] = triggerName;
            triggerObject["text"] = triggerText;
            triggerObject["option1"] = "";
            triggerObject["option2"] = "";

            return triggerObject;

        }

        function getNoteVariablesFromUI() {

            var noteEnabled = document.getElementById('chkNTBoxInputEnabled').checked;
            var notePriority = document.getElementById('chkNTBoxInputPriority').value;
            var notePrivate = document.getElementById('chkNTBoxInputPrivate').checked;
            var noteName = document.getElementById('noteName').value;
            var noteText = document.getElementById('ntNoteText').value;

            if (noteName == "") {
                alert("Click on the Plus Icon to create a new note id then enter note details");
                return;
            }

            if (noteText == "") {
                alert("Enter notes detail");
                return;
            }

            var noteObject = new Object();

            //creates the command object
            noteObject["id"] = noteName;
            noteObject["todo"] = convertEnabledBoolToYORN(noteEnabled);
            noteObject["note"] = noteText;
            noteObject["priority"] = notePriority;
            noteObject["private"] = convertEnabledBoolToYORN(notePrivate);

            return noteObject;

        }

        function newCurrencyDefaults() {

            var datetimeNow = new Date();

            var currNewID = document.getElementById("inputCurrencyId").value;

            //new currency set id and disable new button
            if (currNewID.length < 1) {
                var newID = getFullDateTimeStringForID(datetimeNow);
                //inputCurrencyId
                SetSelectElement("inputCurrencyId", newID.toString());

            } else {

                alert('Save Exising currency prior to creating a new currency');

            }

        }

        function newNoteDefaults() {

            var datetimeNow = new Date();

            var newID = getFullDateTimeStringForID(datetimeNow);

            SetCheckboxElement("chkNTBoxInputEnabled", "Y");
            SetSelectElement("noteName", newID);
            SetSelectElement("ntNoteText", "");

        }

        function setSaveNoteDefaults() {

            SetCheckboxElement("chkNTBoxInputEnabled", "Y");
            SetSelectElement("noteName", "");
            SetSelectElement("ntNoteText", "");
            SetSelectElement("chkNTBoxInputPriority", "Low");
            SetCheckboxElement("chkNTBoxInputPrivate", "N");

        }

        function setSaveDeleteTimerDefaults() {

            SetCheckboxElement("chkTPBoxInputEnabled", "Y");
            SetSelectElement("TPtimerID", "");
            SetSelectElement("tpText", "");
            SetSelectElement("tpInterval", "");

        }

        function setSaveDeleteTriggerDefaults() {

            SetCheckboxElement("chkKWBoxInputEnabled", "Y");
            SetSelectElement("triggerName", "");
            SetSelectElement("kwTrigText", "");

        }

        function setAddSaveDeleteCommandDefaults() {

            SetCheckboxElement("chkBoxInputEnabled", "Y");
            SetSelectElement("commandUser", "");
            SetSelectElement("commandText", "");
            SetSelectElement("commandName", "");

            document.getElementById('audioSelect').value = "default";
            document.getElementById('videoSelect').value = "default";
            document.getElementById('imageSelect').value = "default";
            document.getElementById('selOptVars').value = "default";
            document.getElementById('selOptPermission').value = "default";

        }

        function setAddSaveDeleteCurrencyDefaults() {

            SetSelectElement("inputCurrencyId", "");
            SetCheckboxElement("chkBoxCurrInputEnabled", "Y");
            SetSelectElement("inputCurrencyName", "");
            SetSelectElement("currencyPerMin", "");
            SetSelectElement("currencyRatio", "");


            SetSelectElement("inputRankName", "");
            SetSelectElement("inputRankAmount", "");


            document.getElementById('currencyBasedOnSelect').value = "default";
            document.getElementById('currencyParentSelect').value = "default";

        }

        //resets values
        function setAddSaveDeleteCurrencyRankDefaults() {

            SetSelectElement("inputRankName", "");
            SetSelectElement("inputRankAmount", "");

        }

        function setAddSaveDeleteAlertDefaults() {

            SetCheckboxElement("chkaltBoxInputEnabled", "Y");
            SetSelectElement("altText", "");
            SetSelectElement("alertName", "");

            document.getElementById('audioAltSelect').value = "default";
            document.getElementById('videoAltSelect').value = "default";
            document.getElementById('imageAltSelect').value = "default";
            document.getElementById('selAlertTypeAltVars').value = "default";

        }

        function setAddSaveDeleteMediaDefaults() {

            SetCheckboxElement("chkmedBoxInputEnabled", "Y");
            SetSelectElement("mediaName", "");

            SetSelectElement("medAudOtherValue", "");
            SetSelectElement("medVidOtherValue", "");
            SetSelectElement("medImgOtherValue", "");

            document.getElementById('audioMedSelect').value = "default";
            document.getElementById('videoMedSelect').value = "default";
            document.getElementById('imageMedSelect').value = "default";

            document.getElementById('selMediaTypeMedVars').value = "default";
            document.getElementById('selAudioDurationMedVars').value = "default";
            document.getElementById('selVideoDurationMedVars').value = "default";
            document.getElementById('selImageDurationMedVars').value = "default";

        }

        function setDeleteNoteDefaults() {

            SetCheckboxElement("chkNTBoxInputEnabled", "Y");
            SetSelectElement("noteName", "");
            SetSelectElement("ntNoteText", "");
            SetSelectElement("chkNTBoxInputPriority", "Low");
            SetCheckboxElement("chkNTBoxInputPrivate", "N");
        }

        function getCommandVariablesFromUI() {

            var commandEnabled = document.getElementById('chkBoxInputEnabled').checked;
            var commandName = document.getElementById('commandName').value;
            var commandPermission = document.getElementById('selOptPermission').value;
            var commandUserSpecific = document.getElementById('commandUser').value;
            var commandAudioFile = document.getElementById('audioSelect').value;
            var commandVideoFile = document.getElementById('videoSelect').value;
            var commandImageFile = document.getElementById('imageSelect').value;
            var commandText = document.getElementById('commandText').value;

            var commandObject = new Object();

            if (commandAudioFile.startsWith("Select") && commandVideoFile.startsWith("Select") && commandImageFile.startsWith("Select") && commandText == "") {
                alert("You must select at least one of the four command types");
                return;
            } else {

                //defaults need to be cleared / set to nothing
                commandAudioFile = clearFileDefaults(commandAudioFile);
                commandVideoFile = clearFileDefaults(commandVideoFile);
                commandImageFile = clearFileDefaults(commandImageFile);

                //creates the command object
                commandObject["enabled"] = convertEnabledBoolToYORN(commandEnabled);
                commandObject["id"] = commandName;
                commandObject["permission"] = commandPermission;
                commandObject["user"] = commandUserSpecific;
                commandObject["audio"] = commandAudioFile;
                commandObject["video"] = commandVideoFile;
                commandObject["image"] = commandImageFile;
                commandObject["text"] = commandText;

            }

            return commandObject;
        }


        function getCurrencyVariablesFromUI() {

            var currEnabled = document.getElementById('chkBoxCurrInputEnabled').checked;
            var currName = document.getElementById('inputCurrencyName').value;
            var currId = document.getElementById('inputCurrencyId').value;
            var currPerMin = document.getElementById('currencyPerMin').value;
            var currRatio = document.getElementById('currencyRatio').value;

            currEnabled = convertEnabledBoolToYORN(currEnabled);


            //document.getElementById('currencyBasedOnSelect').value;
            var currBasedOn = document.getElementById('currencyBasedOnSelect').selectedOptions[0].innerText;
            var currBasedOnValue = document.getElementById('currencyBasedOnSelect').selectedOptions[0].value;



            //currency can't be its own parent
            var currParent = document.getElementById('currencyParentSelect').selectedOptions[0].innerText;
            var currParentValue = document.getElementById('currencyParentSelect').selectedOptions[0].value;



            if (currParentValue == 'default') {

                currParent = "";
            }


            if (currName.length < 1 || currBasedOnValue == 'default') {
                alert('Currency Name and Based On are required');

            } else {
                var currObject = new Object();

                //creates the command object
                currObject["id"] = currId;
                currObject["enabled"] = currEnabled;
                currObject["currencyName"] = currName
                currObject["currencyPerMin"] = currPerMin;
                currObject["currencyRatio"] = currRatio; //only required if parent exists
                currObject["currencyBasedOn"] = currBasedOn;
                currObject["currencyParentId"] = currParentValue;
                currObject["currencyParentName"] = currParent;

                return currObject;
            }


        }


        function getCurrencyRankVariablesFromUI() {

            var currId = document.getElementById('inputCurrencyId').value;
            var currRankName = document.getElementById('inputRankName').value;
            var currRankAmount = document.getElementById('inputRankAmount').value;

            if (currId.length < 1) {
                alert('Select or create a currency prior to adding a rank');

            } else {
                if (currRankName.length < 1 || currRankAmount.length < 1) {
                    alert('Rank name or amount cannot be empty');
                    return undefined;

                } else {
                    var currRankObject = new Object();

                    //creates the command object
                    currRankObject["id"] = currId;
                    currRankObject["currencyRankName"] = currRankName;
                    currRankObject["currencyRankAmount"] = currRankAmount;

                    return currRankObject;

                }
            }

        }


        function clearFileDefaults(value) {
            if (value.startsWith("default")) {
                return "";
            } else {
                return value;
            }
        }

        function setFileDefaults(value) {
            if (value == "") {
                return "default";
            } else {
                return value;
            }
        }


        //need to work on this
        function getAlertVariablesFromUI() {

            var alertEnabled = document.getElementById('chkaltBoxInputEnabled').checked;
            var alertName = document.getElementById('alertName').value;
            var commandAudioFile = document.getElementById('audioAltSelect').value;
            var commandVideoFile = document.getElementById('videoAltSelect').value;
            var commandImageFile = document.getElementById('imageAltSelect').value;
            var commandText = document.getElementById('altText').value;
            var commandAlertType = document.getElementById('selAlertTypeAltVars').value;

            if (alertName == "" | commandAlertType == "") {
                alert("Please Fill In the Alert Name and Type");
                return;
            }

            //clears defaults
            commandAudioFile = clearFileDefaults(commandAudioFile);
            commandVideoFile = clearFileDefaults(commandVideoFile);
            commandImageFile = clearFileDefaults(commandImageFile);

            if (commandAudioFile == "" && commandVideoFile == "" && commandImageFile == "" && commandText == "") {
                alert("Please Fill in Audio , Image , Video or Text");
                return;
            }



            var commandObject = new Object();
            commandObject["enabled"] = convertEnabledBoolToYORN(alertEnabled);
            commandObject["id"] = alertName;
            commandObject["audio"] = commandAudioFile;
            commandObject["video"] = commandVideoFile;
            commandObject["image"] = commandImageFile;
            commandObject["text"] = commandText;
            commandObject["type"] = commandAlertType;

            return commandObject;

        }


        function getMediaVariablesFromUI() {

            var mediaEnabled = document.getElementById('chkmedBoxInputEnabled').checked;
            var mediaName = document.getElementById('mediaName').value;

            var mediaType = document.getElementById('selMediaTypeMedVars').selectedOptions[0].innerText;
            var mediaAudioFile = document.getElementById('audioMedSelect').selectedOptions[0].innerText;
            var mediaAudioDur = document.getElementById('selAudioDurationMedVars').selectedOptions[0].innerText;
            var mediaAudioOtherVal = document.getElementById('medAudOtherValue').value;

            var mediaVideoFile = document.getElementById('videoMedSelect').selectedOptions[0].innerText;
            var mediaVideoDur = document.getElementById('selVideoDurationMedVars').selectedOptions[0].innerText;
            var mediaVideoOtherVal = document.getElementById('medVidOtherValue').value;

            var mediaImageFile = document.getElementById('imageMedSelect').selectedOptions[0].innerText;
            var mediaImageDur = document.getElementById('selImageDurationMedVars').selectedOptions[0].innerText;
            var mediaImageOtherVal = document.getElementById('medImgOtherValue').value;

            //TODO get value from durations and convert to milliseconds

            if (mediaType.startsWith("Select") | mediaName == "") {
                alert("Please select a Media Type and Media Name");
                return;
            } else {

                var mediaObject = new Object();
                if (mediaType == "Audio") {

                    if (mediaAudioFile.startsWith("Select") | mediaAudioDur.startsWith("Select")) {
                        alert("Please select an audio file and audio duration");
                        return;
                    } else {

                        if (mediaAudioOtherVal.length > 0) {

                            mediaAudioDur = setMediaDurationFromUI(mediaAudioOtherVal, mediaAudioDur);

                        } else {
                            mediaAudioDur = convertUIDurationToMilliseconds(mediaAudioDur)
                        }

                        if (mediaAudioDur != "") {
                            mediaObject["enabled"] = convertEnabledBoolToYORN(mediaEnabled);
                            mediaObject["id"] = mediaName;
                            mediaObject["type"] = mediaType;
                            mediaObject["audio"] = mediaAudioFile;
                            mediaObject["audiodur"] = mediaAudioDur;
                            mediaObject["video"] = "";
                            mediaObject["videodur"] = "";
                            mediaObject["image"] = "";
                            mediaObject["imagedur"] = "";

                        }

                    }

                }

                if (mediaType == "Image") {

                    if (mediaImageFile.startsWith("Select") | mediaImageDur.startsWith("select")) {
                        alert("Please select an Image file and image duration");
                        return;
                    } else {

                        if (mediaImageOtherVal.length > 0) {

                            mediaImageDur = setMediaDurationFromUI(mediaImageOtherVal, mediaImageDur);
                        } else {
                            mediaImageDur = convertUIDurationToMilliseconds(mediaImageDur);
                        }

                        mediaObject["enabled"] = convertEnabledBoolToYORN(mediaEnabled);
                        mediaObject["id"] = mediaName;
                        mediaObject["type"] = mediaType;
                        mediaObject["audio"] = "";
                        mediaObject["audiodur"] = "";
                        mediaObject["video"] = "";
                        mediaObject["videodur"] = "";
                        mediaObject["image"] = mediaImageFile;
                        mediaObject["imagedur"] = mediaImageDur;
                    }
                }

                if (mediaType == "Video") {

                    if (mediaVideoFile.startsWith("Select") | mediaVideoDur.startsWith("select")) {
                        alert("Please select a video file and video duration");
                        return;
                    } else {

                        if (mediaVideoOtherVal.length > 0) {

                            mediaVideoDur = setMediaDurationFromUI(mediaVideoOtherVal, mediaVideoDur);

                        } else {
                            mediaVideoDur = convertUIDurationToMilliseconds(mediaVideoDur)
                        }

                        mediaObject["enabled"] = convertEnabledBoolToYORN(mediaEnabled);
                        mediaObject["id"] = mediaName;
                        mediaObject["type"] = mediaType;
                        mediaObject["audio"] = "";
                        mediaObject["audiodur"] = "";
                        mediaObject["video"] = mediaVideoFile;
                        mediaObject["videodur"] = mediaVideoDur;
                        mediaObject["image"] = "";
                        mediaObject["imagedur"] = "";
                    }
                }

                return mediaObject;

            }


        }

        //this manages the device widths, its a start
        setDeviceWidthLayout();

    });

    function convertEnabledBoolToYORN(value) {
        if (value == true) {
            return "Y";
        } else {
            return "N";
        }
    }

    function transformUIPermsToCommandPerms(commandPermissions) {

        switch (commandPermissions) {
            case "Mod":
                return "+m";
            case "Viewer":
                return "+v";
            case "Owner":
                return "+o";
            case "Follower":
                return "+f";
            case "Subscriber":
                return "+s";
            case "User":
                return "+u";
            default:
                return "+v";
        }


    }

    function setMediaDurationFromUI(OtherVal, durValue) {

        if (OtherVal.startsWith("0")) {
            durValue = OtherVal.substring(1) * 1000;
        } else {
            durValue = parseInt(OtherVal) * 1000;
        }
        return durValue;
    }

    function convertUIDurationToMilliseconds(durationIn) {

        switch (durationIn) {

            case "":
                return "";
            case "5 Seconds":
                return 5000;
            case "10 Seconds":
                return 10000;
            case "15 Seconds":
                return 15000;
            case "30 Seconds":
                return 30000;
            case "60 Seconds":
                return 60000;
            case "Other":
                return "Other";
            default:
                return "";
        }

    }

    function getPermFromCommand(commandPermissions) {

        switch (commandPermissions) {
            case "+m":
                return "Mod";
            case "+v":
                return "Viewer";
            case "+o":
                return "Owner";
            case "+f":
                return "Follower";
            case "+s":
                return "Subscriber";
            case "+u":
                return "User";
            default:
                return "Viewer";
        }

    }

    function getBasedOnFromCurrency(currencyBasedOn) {

        console.log('BasedOnValue = ' + currencyBasedOn)
        switch (currencyBasedOn) {
            case "Points":
                return "Points";
            default:
                return "Hours";
        }

    }


    function pushDivToBack(value, index, array) {

        var x = document.getElementById(value);
        x.style.zIndex = 0;

    }

    function setDefaultUIVisibility() {

        HideUIElementAndUncheckSwitch("divWrapperNarrowRecentFollowers", "recentFollowersChkBox")
        HideUIElementAndUncheckSwitch("divWrapperFollowing", "followingChkBox")
        HideUIElementAndUncheckSwitch("divWrapperFollowers", "followersChkBox")
        HideUIElementAndUncheckSwitch("divWrapperHostAlertsList", "hostalertsChkBox")
        HideUIElementAndUncheckSwitch("divWrapperFollowAlertsList", "followalertsChkBox")
        HideUIElementAndUncheckSwitch("divWrapperKeywordsList", "keywordsListChkBox")
        HideUIElementAndUncheckSwitch("divWrapperTimersList", "timerListChkBox")
        HideUIElementAndUncheckSwitch("divWrapperModMonitor", "modMonChkBox")
        HideUIElementAndUncheckSwitch("divWrapperNotesList", "notesListChkBox")
        HideUIElementAndUncheckSwitch("divWrapperAlerts", "alertfilesChkBox")
        HideUIElementAndUncheckSwitch("divWrapperMedia", "mediafilesChkBox")
        HideUIElementAndUncheckSwitch("divWrapperCommandsList", "commandsListChkBox")
        HideUIElementAndUncheckSwitch("divWrapperAnalyticsViews", "analyticsViewsChkBox")

    }

    function HideUIElementAndUncheckSwitch(panel, switchID) {
        HideUIElement(panel);
        UnCheckElement(switchID);
    }

    function HideUIElement(panel) {
        panelID = document.getElementById(panel);

        if (panelID != undefined) {
            if (panelID.style.display === "none") {
                panelID.style.display = "block";
            } else {
                panelID.style.display = "none";
            }
        }
    }

    function setDefaultTheme(data) {

        let outsideColour = data.outside;
        let insideColour = data.inside;
        let buttoncolorColour = data.buttoncolor;
        let buttontextcolorColour = data.buttontextcolor;
        let searchbgColour = data.searchbg;
        let combocolourColour = data.combocolour;
        let combotextcolorColour = data.combotextcolor;
        let panelheadertextcolorColour = data.panelheadertextcolor;
        let bgcolorColour = data.bgcolor;


        var picker = document.getElementById('OutsideColorPicker');
        picker.setAttribute('value', outsideColour);
        picker.dispatchEvent(new Event('change'));

        picker = document.getElementById('InsideColorPicker');
        picker.setAttribute('value', insideColour);
        picker.dispatchEvent(new Event('change'));

        picker = document.getElementById('TogglesColorPicker');
        picker.setAttribute('value', buttoncolorColour);
        picker.dispatchEvent(new Event('change'));

        picker = document.getElementById('TogglesTextColorPicker');
        picker.setAttribute('value', buttontextcolorColour);
        picker.dispatchEvent(new Event('change'));

        picker = document.getElementById('SearchColorPicker');
        picker.setAttribute('value', searchbgColour);
        picker.dispatchEvent(new Event('change'));

        picker = document.getElementById('DropdownBackgroundColorPicker');
        picker.setAttribute('value', combocolourColour);
        picker.dispatchEvent(new Event('change'));

        picker = document.getElementById('DropdownTextColorPicker');
        picker.setAttribute('value', combotextcolorColour);
        picker.dispatchEvent(new Event('change'));

        picker = document.getElementById('ModuleTextColorPicker');
        picker.setAttribute('value', panelheadertextcolorColour);
        picker.dispatchEvent(new Event('change'));

        picker = document.getElementById('ModuleBackgroundColorPicker');
        picker.setAttribute('value', bgcolorColour);
        picker.dispatchEvent(new Event('change'));

    }

    function changeBotBackgroundColor(event) {

        changeBotBackgroundItemChange(event.target.value);
        saveUIThemeSetting('bgcolor', event.target.value);

    }

    function changeTextOnModules(event) {

        var themeElementsText = [];
        themeElementsText.push("sendMessageTxtBox");
        themeElementsText.push("followCountUsrs");
        themeElementsText.push("followingCountUsrs");
        themeElementsText.push("recentFollowersCount");
        //themeElementsText.push("commandPanelHeaderText");
        themeElementsText.push("commandsListHeaderText");
        //themeElementsText.push("triggerPanelHeaderText");
        //themeElementsText.push("notePanelHeaderText");
        //themeElementsText.push("timerpanelPanelHeaderText");
        themeElementsText.push("mediaPanelHeaderText");
        themeElementsText.push("alertsPanelHeaderText");
        themeElementsText.push("chatwindowText");
        themeElementsText.push("menutexthostalerts");
        themeElementsText.push("menutextfollowalerts");
        themeElementsText.push("menutextkeywords");
        themeElementsText.push("menutexttimerlist");
        themeElementsText.push("menutextmodmonitor");
        themeElementsText.push("menutextrecentfollowers");
        themeElementsText.push("rankHeaderText");
        themeElementsText.push("currencyListHeaderText");
        themeElementsText.push("currencyHeaderText");

        themeElementsText.forEach(changeThemeTextItemChange, event.target.value);


        //change div text colour by class name 
        var themeElementsInsideModuleTextFormatting = [];
        themeElementsInsideModuleTextFormatting.push("medSpansCombo");
        themeElementsInsideModuleTextFormatting.push("medSpans");
        themeElementsInsideModuleTextFormatting.push("altSpansCombo");
        themeElementsInsideModuleTextFormatting.push("altSpans");
        themeElementsInsideModuleTextFormatting.push("triSpans");
        themeElementsInsideModuleTextFormatting.push("notSpans");
        themeElementsInsideModuleTextFormatting.push("triSpansMedium");
        themeElementsInsideModuleTextFormatting.push("notSpansMedium");
        themeElementsInsideModuleTextFormatting.push("triSpansFirst");
        themeElementsInsideModuleTextFormatting.push("notSpansFirst");
        themeElementsInsideModuleTextFormatting.push("triSpansCombo");
        themeElementsInsideModuleTextFormatting.push("cmdSpansCombo");
        themeElementsInsideModuleTextFormatting.push("cmdSpans");
        themeElementsInsideModuleTextFormatting.push("mediaPanelSmalllbl");
        themeElementsInsideModuleTextFormatting.push("modulemenubartext");
        themeElementsInsideModuleTextFormatting.forEach(changeDivTextItemChange, event.target.value);

        saveUIThemeSetting('panelheadertextcolor', event.target.value);

    }

    //add all outer divs here so that they are used in the theme
    function changeOutsideBox(event) {

        var themeElementsMain = [];
        themeElementsMain.push("divWrapperFollowers");
        themeElementsMain.push("divWrapperFollowing");
        themeElementsMain.push("divWrapperNarrowChatUsers");
        themeElementsMain.push("divWrapperNarrowRecentFollowers");
        themeElementsMain.push("divWrapperChat");
        // themeElementsMain.push("divWrapperCommands");
        themeElementsMain.push("divWrapperCommandsList");
        themeElementsMain.push("divWrapperCurrencyList");
        themeElementsMain.push("divWrapperMedia");
        themeElementsMain.push("divWrapperAlerts");
        //
        //themeElementsMain.push("divWrapperTriggerPanel");
        //
        themeElementsMain.push("divWrapperNotesList");
        themeElementsMain.push("divWrapperModMonitor");
        //themeElementsMain.push("divWrapperTimerPanel");
        themeElementsMain.push("divWrapperTimersList");
        themeElementsMain.push("divWrapperFollowAlertsList");
        themeElementsMain.push("divWrapperKeywordsList");
        //themeElementsMain.push("divWrapperNote");
        themeElementsMain.push("divWrapperHostAlertsList");

        //this is the analytis module div wrapper
        themeElementsMain.push("divWrapperAnalyticsViews");


        themeElementsMain.forEach(changeOutsideBoxItemChange, event.target.value);

        saveUIThemeSetting('outside', event.target.value);

    }

    function changeInsideBox(event) {

        var insideBoxElements = [];
        insideBoxElements.push("chatbox");
        insideBoxElements.push("followerbox");
        insideBoxElements.push("followingbox");
        insideBoxElements.push("narrowbox");
        insideBoxElements.push("recentFollowersbox");
        insideBoxElements.push("timersListbox");
        insideBoxElements.push("analyticsViewsbox");
        insideBoxElements.forEach(changeInsideBoxItemChange, event.target.value);

        var insideBoxCommandsElements = [];
        insideBoxCommandsElements.push("commandsbox");
        insideBoxCommandsElements.push("currencybox");
        insideBoxCommandsElements.push("alertsbox");
        insideBoxCommandsElements.push("mediabox");
        insideBoxCommandsElements.push("commandsListbox");
        insideBoxCommandsElements.push("currencyListbox");

        insideBoxCommandsElements.push("keywordsbox");
        insideBoxCommandsElements.push("notesbox");
        insideBoxCommandsElements.push("modmonListbox");
        insideBoxCommandsElements.push("hostAlertsListbox");
        insideBoxCommandsElements.push("followAlertsListbox");


        insideBoxCommandsElements.forEach(changeInsideBoxItemChange, event.target.value);

        saveUIThemeSetting('inside', event.target.value);

    }

    function saveUIThemeSetting(element, color) {
        iosocket.emit('saveUIThemeSetting', element, color);
    }

    function changeToggleButtons(event) {

        var toggleButtonElements = [];
        toggleButtonElements.push("cbBtn");
        toggleButtonElements.push("flActionBtn");
        //toggleButtonElements.push("RecentFollowersActionBtn");
        toggleButtonElements.push("flBtn");
        toggleButtonElements.push("flingBtn");
        toggleButtonElements.push("chtUsersBtn");
        toggleButtonElements.push("avBtn2");
        toggleButtonElements.push("recentFollowersBtn");
        toggleButtonElements.push("flngActionBtn");
        toggleButtonElements.push("ChatActionBtn");
        //toggleButtonElements.push("flBtnWide");
        toggleButtonElements.push("flBtnWideAlerts");
        //toggleButtonElements.push("flBtnWideTimers");

        //toggleButtonElements.push("flBtnWideNoteManager");
        toggleButtonElements.push("submitTPButton");
        toggleButtonElements.push("submitKWButton");
        toggleButtonElements.push("submitNTButton");

        toggleButtonElements.push("flBtnWideMedia");
        toggleButtonElements.push("commandListBtn");
        toggleButtonElements.push("submitCommandButton");
        toggleButtonElements.push("deleteCommandButton");
        toggleButtonElements.push("addCommandVar");

        toggleButtonElements.push("chatUsrBan");
        toggleButtonElements.push("chatUsrTimeout5m");

        toggleButtonElements.push("KeywordsToggleBtn");

        toggleButtonElements.push("NotesToggleBtn");
        toggleButtonElements.push("NotesActionBtn");

        toggleButtonElements.push("hostAlertsListBtn");
        toggleButtonElements.push("followAlertsListBtn");
        //toggleButtonElements.push("timersListBtn");
        toggleButtonElements.push("modmonListBtn");

        toggleButtonElements.push("deleteKWButton");
        toggleButtonElements.push("deleteNTButton");
        toggleButtonElements.push("deleteAlertButton");
        toggleButtonElements.push("submitAlertButton");

        toggleButtonElements.push("deleteMediaButton");
        toggleButtonElements.push("submitMediaButton");

        toggleButtonElements.forEach(changeToggleButtonsItemChange, event.target.value);

        saveUIThemeSetting('buttoncolor', event.target.value);

    }

    function changeToggleButtonsText(event) {

        var toggleButtonElements = [];
        toggleButtonElements.push("cbBtn");
        toggleButtonElements.push("flActionBtn");
        //toggleButtonElements.push("RecentFollowersActionBtn");
        toggleButtonElements.push("flBtn");
        toggleButtonElements.push("flingBtn");
        toggleButtonElements.push("chtUsersBtn");
        toggleButtonElements.push("avBtn2");

        toggleButtonElements.push("recentFollowersBtn");
        toggleButtonElements.push("flngActionBtn");
        toggleButtonElements.push("ChatActionBtn");
        //toggleButtonElements.push("flBtnWide");
        toggleButtonElements.push("flBtnWideAlerts");
        toggleButtonElements.push("flBtnWideMedia");
        toggleButtonElements.push("commandListBtn");

        toggleButtonElements.push("submitCommandButton");
        toggleButtonElements.push("deleteCommandButton");
        toggleButtonElements.push("addCommandVar");

        toggleButtonElements.push("chatUsrBan");
        toggleButtonElements.push("chatUsrTimeout5m");
        toggleButtonElements.push("modmonListBtn");
        //toggleButtonElements.push("timersListBtn");

        toggleButtonElements.push("hostAlertsListBtn");
        toggleButtonElements.push("followAlertsListBtn");
        //toggleButtonElements.push("KeywordsToggleBtn");

        toggleButtonElements.push("NotesToggleBtn");
        toggleButtonElements.push("NotesActionBtn");

        toggleButtonElements.push("submitKWButton");
        toggleButtonElements.push("deleteKWButton");

        toggleButtonElements.forEach(changeToggleButtonsTextItemChange, event.target.value);

        saveUIThemeSetting('buttontextcolor', event.target.value);

    }

    function changeSearchBoxes(event) {

        var moduleSearchBoxElements = [];
        moduleSearchBoxElements.push("myInputF");
        moduleSearchBoxElements.push("myInputFl");
        moduleSearchBoxElements.push("myInputCO");

        moduleSearchBoxElements.forEach(changeSearchBoxItemChange, event.target.value);

        saveUIThemeSetting('searchbg', event.target.value);

    }

    function changeDropdowns(event) {

        //commands dropdowns
        var moduleDropdownElements = [];
        moduleDropdownElements.push("selOptPermission");
        moduleDropdownElements.push("audioSelect");
        moduleDropdownElements.push("videoSelect");
        moduleDropdownElements.push("imageSelect");


        //alert dropdowns
        moduleDropdownElements.push("selAlertTypeAltVars");
        moduleDropdownElements.push("audioAltSelect");
        moduleDropdownElements.push("imageAltSelect");
        moduleDropdownElements.push("videoAltSelect");

        //media dropdowns
        moduleDropdownElements.push("selMediaTypeMedVars");
        moduleDropdownElements.push("audioMedSelect");
        moduleDropdownElements.push("selAudioDurationMedVars");
        moduleDropdownElements.push("imageMedSelect");
        moduleDropdownElements.push("selImageDurationMedVars");
        moduleDropdownElements.push("videoMedSelect");
        moduleDropdownElements.push("selVideoDurationMedVars");

        moduleDropdownElements.forEach(changeDropdownsTextItemChange, event.target.value);
        ///

        saveUIThemeSetting('combotextcolor', event.target.value);

    }

    function changeDropdownsBackground(event) {

        //commands dropdowns
        var moduleDropdownElements = [];
        moduleDropdownElements.push("selOptPermission");
        moduleDropdownElements.push("audioSelect");
        moduleDropdownElements.push("videoSelect");
        moduleDropdownElements.push("imageSelect");

        //alert dropdowns
        moduleDropdownElements.push("selAlertTypeAltVars");
        moduleDropdownElements.push("audioAltSelect");
        moduleDropdownElements.push("imageAltSelect");
        moduleDropdownElements.push("videoAltSelect");

        //media dropdowns
        moduleDropdownElements.push("selMediaTypeMedVars");
        moduleDropdownElements.push("audioMedSelect");
        moduleDropdownElements.push("selAudioDurationMedVars");
        moduleDropdownElements.push("imageMedSelect");
        moduleDropdownElements.push("selImageDurationMedVars");
        moduleDropdownElements.push("videoMedSelect");
        moduleDropdownElements.push("selVideoDurationMedVars");

        moduleDropdownElements.forEach(changeDropdownsBackgroundItemChange, event.target.value);

        saveUIThemeSetting('combocolour', event.target.value);

    }

    function changeThemeTextItemChange(value, index, array) {
        document.getElementById(value).style.color = this;

        var el = document.getElementById(value);
        el.style.color = this;

    }

    function changeThemeTextItemChangeFormatting(value, index, array) {
        var el = document.getElementById(value);

        el.style.color = this;
        el.style.fontWeight = "bold";

    }

    function changeBotBackgroundItemChange(value, index, array) {
        document.body.style.backgroundColor = value;
    }

    function changeOutsideBoxItemChange(value, index, array) {
        document.getElementById(value).style.background = this;
    }

    function changeInsideBoxItemChange(value, index, array) {
        document.getElementById(value).style.background = this;
    }

    function changeToggleButtonsItemChange(value, index, array) {
        var el = document.getElementById(value);
        var elTextValue = document.getElementById('TogglesTextColorPicker').value;
        el.style.background = this;
        el.style.color = elTextValue;

    }

    function changeToggleButtonsTextItemChange(value, index, array) {
        var el = document.getElementById(value);
        var elBackgroundValue = document.getElementById('TogglesColorPicker').value;
        el.style.background = elBackgroundValue;
        el.style.color = this;
    }

    function changeSearchBoxItemChange(value, index, array) {
        document.getElementById(value).style.background = this;
    }

    function changeDropdownsTextItemChange(value, index, array) {

        var el = document.getElementById(value);
        el.style.color = this;
        el.style.backgroundImage = "url('../css/comboboxarrow.png')";
    }

    function changeDropdownsBackgroundItemChange(value, index, array) {
        var el = document.getElementById(value);
        el.style.backgroundColor = this;
    }

    function changeDivTextItemChange(value, index, array) {

        var colour = this;
        var inner = document.querySelectorAll("div." + value);

        inner.forEach(function(item) {
            item.style.color = colour;
        });
    }

    function TimeOutMixerUser() {

        var userToTimeout = document.getElementById('ChatActionBtn');

        if (userToTimeout != "-") {

            var timeoutUser = userToTimeout.innerHTML.split(" - ");

            var timeout = confirm('Are you sure you want to timeout ' + timeoutUser[0]);
            if (timeout) {
                alert('Timeout Submitted');
                var personData = {
                    username: timeoutUser[0],
                    duration: "5m"
                };

                iosocket.emit('TimeoutMixerUser', personData);

            } else {
                alert('Timeout Cancelled');
            }
        }
    }

    function BanMixerUser() {

        var userToBan = document.getElementById('ChatActionBtn');

        if (userToBan != "-") {

            var banUser = userToBan.innerHTML.split(" - ");

            var timeout = confirm('Are you sure you want to ban ' + banUser[0] + banUser[1]);
            if (timeout) {
                alert('Ban Submitted');
                var personData = {
                    userid: banUser[1]
                };

                iosocket.emit('BanMixerUser', personData);

            } else {
                alert('Timeout Cancelled');
            }
        }
    }

    function emptyTables() {

        removeData();

    }

    function removeData() {
        $("#tableChatUsers").find("tr:not(:first)").remove();
        $("#tableF").find("tr:not(:first)").remove();
        $("#tableCF").find("tr:not(:first)").remove();
    }

    function setUIToRefreshingData() {
        // refreshingMixerData();
        //set UI to Refresh in progress here
    }

    function refreshingMixerData() {
        //todo add connection icon
        document.getElementById("beamConnection").innerHTML = '';
        document.getElementById("beamConnection").innerHTML += "Mixer: Refreshing Data...";

        document.getElementById("mixericonleft").style.color = "grey";
        document.getElementById("mixericonright").style.color = "darkgrey";
    }

    function pingBeam() {

        //  emptyTables();
        //  setUIToRefreshingData();

    }

    function addCommandsToListModule(data) {

        console.log('add commands to UI: ' + JSON.stringify(data));
        data.data.commands.forEach(function(element) {

            addSingleCommandToCommandListModule(element);

        }, this);
    }

    function addOptionsToParentCurrencyDropdown(data) {
        console.log('add parent currency to UI: ' + JSON.stringify(data));
        data.forEach(function(element) {

            addSingleParentCurrencyToParencyCurrencyDropdown(element);

        }, this);


    }


    function addSingleParentCurrencyToParencyCurrencyDropdown(data) {


        var parentCurrencyId = data.currencyId;
        var parentCurrencyName = data.currencyName;

        //alert("Adding Parent Item to dorpdown" + data);

        addParentCurrencyToDropDown(data);



    }

    function addSingleCommandToCommandListModule(data) {

        var commandEnabled = data.enabled;
        var commandName = data.id;
        var commantText = data.text;
        var commandPerms = data.permission;
        var commandUser = data.user;
        var commandAudio = data.audio;
        var commandVideo = data.video;
        var commandImage = data.image;


        var hidden = "display:none;";
        var tr;
        tr = $('<tr id="CO' + commandName.replace("!", "x") + '" class /> ');
        tr.append("<td>" + commandEnabled + "</td>");
        tr.append("<td>" + commandName + "</td>");
        tr.append("<td>" + commantText + "</td>");
        tr.append("<td>" + commandPerms + "</td>");
        tr.append("<td>" + commandUser + "</td>");
        tr.append("<td>" + commandAudio + "</td>");
        tr.append("<td>" + commandVideo + "</td>");
        tr.append("<td>" + commandImage + "</td>");

        $('#tableCO').append(tr);

    }

    function mixerChatMessageAccountTypeSelected(id) {

    }

    function SetSelectElement(id, valueToSelect) {
        var element = document.getElementById(id);
        element.value = valueToSelect;
    }

    function SetCheckboxElement(id, valueToSelect) {
        var element = document.getElementById(id);
        var check = false;
        if (valueToSelect != undefined) {
            if (valueToSelect == "Y") {
                check = true;
            } else if (valueToSelect == "true") {
                check = true;
            }
        }
        element.checked = check;
    }

    function UnCheckElement(id) {

        var element = document.getElementById(id);
        element.checked = false;

    }

    function scrollToEnd(elementName) {
        var objDiv = document.getElementById(elementName);
        objDiv.scrollTop = objDiv.scrollHeight;
    }

    function HideUIClassElement(className) {

        var ClassElements = document.getElementsByClassName(className);
        for (var i = 0; i < ClassElements.length; i++) {
            var element = ClassElements[i].style.display = "none";
        }

    }

    function UnHideUIClassElement(className) {


        var ClassElements = document.getElementsByClassName(className);
        for (var i = 0; i < ClassElements.length; i++) {
            ClassElements[i].removeAttribute("style");
        }

    }

    function setDeviceWidthLayout() {
        console.log('device width = ' + devicewidth.toString());
        document.getElementById("container").style.width = Math.round((devicewidth / 100 * 85) + 11) + 'px';
        document.getElementsByTagName("BODY")[0].style.width = Math.round((devicewidth / 100 * 85) + 11) + 'px';
        document.getElementById("chkBoxList").style.marginLeft = Math.round((devicewidth / 100 * 85)) + 12 + 'px';


    }

    function buildChatMessage(avatarURL, primaryRole, UserName, message, isWhisper) {

        var li;
        var colour = "black";

        var messageDateTime = new Date();
        var messageDateString = messageDateTime.toLocaleDateString();
        var messageTimeString = messageDateTime.toLocaleTimeString();
        var messageDate = messageDateString + ' ' + messageTimeString;

        switch (primaryRole) {
            case "Owner":
                colour = "yellow"
                break;
            case "Mod":
                colour = "green"
                break;
            case "Subscriber":
                colour = "orange"
                break;
            case "Viewer":
                colour = "blue"
                break;
            case "Pro":
                colour = "purple"
                break;
            case "User":
                colour = "blue"
                break;
            default:
                // code block
        }

        var styleColour = 'color:' + colour + ';';
        var avatarURL = avatarURL;

        li = $('<li/> ');
        //li.append('<img class="mixerChat" height="25" width="25" src="' + avatarURL + '" alt="avatar" id="itemImg" style="border-radius: 50%;">');

        if (isWhisper) {
            //auto hosts aren't aligning properly
            // li.append('<div style="float:left; font-style: italic;font-weight:lighter;font_family:arial;"><p style="' + styleColour + '">' + UserName + ' - ' + primaryRole + ' <span style="color:midnightblue;padding-left:5px;">' + messageDate + '</span></p> <p style="color:blue;">Whisper: ' + message + '</p></div>');
            // li.append('<div style="float: none; clear: both;"></div>');

            //li.append('<div style="float:left; font-style: italic;font-weight:lighter;font_family:arial;"><span style="' + styleColour + '">' + UserName + ' - ' + primaryRole + '</span> <span style="color:midnightblue;padding-left:5px;">' + messageDate + '</span> <span style="color:blue;">Whisper: ' + message + '</span></div>');

            // li.append('<div tabindex="-1"> <img class="mixerChat" height="25" width="25" src="' + avatarURL + '" alt="avatar" id="itemImg" style="border-radius: 50%; "> <div style=" clear: both; margin-bottom:10px;margin-left:40px; font-style: italic;font-weight:lighter;font_family:arial;">  <span style="margin-left:5px;' + styleColour + '">' + UserName + ' - ' + primaryRole + '</span>' + '<span style="color:midnightblue;font-style: italic;font-weight: lighter;padding-left:5px;">' + messageDate + '</span> <span style="color:blue; margin-bottom:10px; margin-left: 5px;">' + message + '</span> </div> </div>');


            li.append('<div id="whisperMessageRow" class="whisperMessageRow" tabindex="-1" style="position:relative; clear:both;"> <img class="mixerChat" src="' + avatarURL + '" width="25" height="25" aria-hidden="true" style="border-radius: 50%;"><div id="messageRowText" class style="margin-left: 30px; margin-top:8px; font-style: italic;font-weight:lighter;font_family:arial;" ><span class style="' + styleColour + '">' + UserName + ' - ' + primaryRole + '</span>' + '<span style="color:midnightblue;font-style: italic;font-weight: lighter;padding-left:5px;">' + messageDate + '</span> <span style="color:blue; margin-bottom:10px; margin-left: 5px;">' + escapeHTML(message) + '</span></div></div>');


        } else {

            li.append('<div id="messageRow" class="messageRow" tabindex="-1" style="position:relative; clear:both;"> <img class="mixerChat" src="' + avatarURL + '" width="25" height="25" aria-hidden="true" style="border-radius: 50%;"><div id="messageRowText" class style="margin-left: 30px; margin-top:8px;" ><span class style="' + styleColour + '">' + UserName + ' - ' + primaryRole + '</span>' + '<span style="color:midnightblue;font-style: italic;font-weight: lighter;padding-left:5px;">' + messageDate + '</span> <span style="color:black; margin-bottom:10px; margin-left: 5px;">' + escapeHTML(message) + '</span></div></div>');

            //li.append('<p style="margin-left:25px;' + styleColour + '">' + UserName + ' - ' + primaryRole + ' <span style="color:midnightblue;font-style: italic;font-weight: lighter;padding-left:5px;">' + messageDate + '</span></p>  <p style="color:black; margin-bottom:10px; margin-left: 25px;">' + message + '</p>');

            //good one
            // li.append('<div class="messageRow" tabindex="-1" style="position:relative; clear:both;"> <img class="mixerChat" height="25" width="25" src="' + avatarURL + '" alt="avatar" id="itemImg" style="border-radius: 50%; "> <div style="float: left; clear: both; margin-bottom:10px; margin-left:25px;">  <span style="margin-left:5px;' + styleColour + '">' + UserName + ' - ' + primaryRole + '</span>' + '<span style="color:midnightblue;font-style: italic;font-weight: lighter;padding-left:5px;">' + messageDate + '</span> <span style="color:black; margin-bottom:10px; margin-left: 5px;">' + message + '</span> </div> </div>');

        }
        //li.append('<div style="float: none; clear: both;"></div>');
        $('#incomingChatMessages').append(li);

        // $('#incomingChatMessages').append(li);
    }

    function showDialogWithImage(parentElementId, elementId, text, dialogTitle) {

        emptyElementById(elementId);
        addImageToDialogFromWeb("dialogImg");
        appendTextToElementById(elementId, text);


        $("#" + parentElementId).dialog({
            title: dialogTitle,
            modal: true,
            resizable: false
        }).show();
    }

    function emptyElementById(elementId) {

        document.getElementById(elementId).innerHTML = '';
    }


    function escapeHTML(message) {
        return message.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    }

    function appendTextToElementById(elementId, text) {
        document.getElementById(elementId).innerHTML += text;
    }

    function addImageToDialogFromWeb(imageElement) {

        var srcUrl = "https://media2.giphy.com/media/dBCWyNMrcJf07pP2kb/giphy.gif?cid=ecf05e47a1e7a9301f84b6b14cdd4a45e2c51eb8062708f7&rid=giphy.gif";
        $("#" + imageElement).attr("src", srcUrl);

        /*        // src="https://media2.giphy.com/media/dBCWyNMrcJf07pP2kb/giphy.gif?cid=ecf05e47a1e7a9301f84b6b14cdd4a45e2c51eb8062708f7&rid=giphy.gif"

                var imageHtml = '<img id="dialogImg" src="' + srcUrl + '" width="250" height="250" aria-hidden="true" style="border-radius: 50%;">';
                $('#' + parentElement).append(imageHtml); */

    }

    //analytics TODO
    function buildChartUsingJson() {
        var jsonfile = {
            "jsonarray": [{
                "name": "Joe",
                "age": 12
            }, {
                "name": "Tom",
                "age": 14
            }, {
                "name": "Peter",
                "age": 16
            }]
        };

        var labels = jsonfile.jsonarray.map(function(e) {
            return e.name;
        });
        var data = jsonfile.jsonarray.map(function(e) {
            return e.age;
        });;

        var ctx = document.getElementById("canvas").getContext('2d');
        var config = {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Bar Graph',
                    data: data,
                    backgroundColor: 'rgba(0, 119, 204, 0.3)'
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        };

        var chart = new Chart(ctx, config);
        //
    }
</script>